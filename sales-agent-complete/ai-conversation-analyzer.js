class AIConversationAnalyzer {
    constructor() {
        this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        this.model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });
        this.analysisResults = {
            conversationPatterns: [],
            conversionBottlenecks: [],
            successFactors: [],
            improvementSuggestions: [],
            promptOptimizations: []
        };
    }

    async analyzeSimulationResults(simulationData) {
        console.log('üîç === AN√ÅLISE INTELIGENTE P√ìS-SIMULA√á√ÉO ===\n');
        
        // 1. An√°lise de Padr√µes de Conversa√ß√£o
        const conversationPatterns = await this.analyzeConversationPatterns(simulationData);
        
        // 2. Identifica√ß√£o de Gargalos de Convers√£o
        const bottlenecks = await this.identifyConversionBottlenecks(simulationData);
        
        // 3. An√°lise de Fatores de Sucesso
        const successFactors = await this.analyzeSuccessFactors(simulationData);
        
        // 4. Gera√ß√£o de Sugest√µes de Melhoria
        const improvements = await this.generateImprovementSuggestions({
            patterns: conversationPatterns,
            bottlenecks,
            successFactors
        });
        
        // 5. Otimiza√ß√µes de Prompt
        const promptOptimizations = await this.generatePromptOptimizations(improvements);
        
        return {
            conversationPatterns,
            bottlenecks,
            successFactors,
            improvements,
            promptOptimizations,
            executiveSummary: await this.generateExecutiveSummary({
                conversationPatterns,
                bottlenecks,
                successFactors,
                improvements
            })
        };
    }

    async analyzeConversationPatterns(simulationData) {
        const prompt = `
        Analise os seguintes dados de simula√ß√£o de conversas de vendas:
        
        DADOS DA SIMULA√á√ÉO:
        ${JSON.stringify(simulationData, null, 2)}
        
        Como especialista em an√°lise conversacional, identifique:
        
        1. PADR√ïES DE SUCESSO:
           - Quais frases/abordagens geraram mais engajamento?
           - Em que est√°gios houve maior convers√£o?
           - Quais elementos de personaliza√ß√£o funcionaram?
        
        2. PADR√ïES DE FALHA:
           - Onde os leads mais abandonaram a conversa?
           - Quais mensagens geraram resist√™ncia?
           - Que obje√ß√µes n√£o foram bem tratadas?
        
        3. INSIGHTS COMPORTAMENTAIS:
           - Diferen√ßas por tipo de personalidade
           - Varia√ß√µes por hor√°rio/regi√£o
           - Padr√µes de resposta por est√°gio
        
        Retorne em JSON estruturado com an√°lise detalhada.
        `;
        
        const result = await this.model.generateContent(prompt);
        return JSON.parse(result.response.text());
    }

    async identifyConversionBottlenecks(simulationData) {
        const prompt = `
        Como especialista em funil de vendas, analise onde est√£o os GARGALOS de convers√£o:
        
        DADOS: ${JSON.stringify(simulationData, null, 2)}
        
        Identifique:
        1. EST√ÅGIOS COM MAIOR ABANDONO
        2. MENSAGENS QUE CAUSAM OBJE√á√ïES
        3. MOMENTOS DE PERDA DE INTERESSE
        4. FALHAS NA SEQU√äNCIA DE NURTURING
        5. PROBLEMAS DE TIMING
        
        Para cada gargalo, forne√ßa:
        - Localiza√ß√£o exata (est√°gio/momento)
        - Causa raiz prov√°vel
        - Impacto na convers√£o (%)
        - Prioridade de corre√ß√£o (1-5)
        
        Retorne JSON estruturado.
        `;
        
        const result = await this.model.generateContent(prompt);
        return JSON.parse(result.response.text());
    }

    async analyzeSuccessFactors(simulationData) {
        const prompt = `
        Analise os FATORES DE SUCESSO nas convers√µes bem-sucedidas:
        
        DADOS: ${JSON.stringify(simulationData, null, 2)}
        
        Identifique:
        1. ELEMENTOS COMUNS nas convers√µes exitosas
        2. T√âCNICAS DE PERSUAS√ÉO mais efetivas
        3. MOMENTOS IDEAIS para cada abordagem
        4. PERSONALIZA√á√ÉO que funciona
        5. SEQU√äNCIAS de mensagens vencedoras
        
        Para cada fator, forne√ßa:
        - Descri√ß√£o detalhada
        - Taxa de sucesso associada
        - Contexto de aplica√ß√£o
        - Replicabilidade (1-5)
        
        Retorne JSON estruturado.
        `;
        
        const result = await this.model.generateContent(prompt);
        return JSON.parse(result.response.text());
    }

    async generateImprovementSuggestions(analysisData) {
        const prompt = `
        Com base na an√°lise completa, gere SUGEST√ïES PR√ÅTICAS DE MELHORIA:
        
        AN√ÅLISE: ${JSON.stringify(analysisData, null, 2)}
        
        Crie sugest√µes categorizadas:
        
        1. MELHORIAS IMEDIATAS (implementa√ß√£o < 1 dia):
           - Ajustes de texto
           - Mudan√ßas de timing
           - Reordena√ß√£o de est√°gios
        
        2. MELHORIAS T√ÅTICAS (implementa√ß√£o < 1 semana):
           - Novos templates
           - L√≥gicas de personaliza√ß√£o
           - Tratamento de obje√ß√µes
        
        3. MELHORIAS ESTRAT√âGICAS (implementa√ß√£o < 1 m√™s):
           - Reestrutura√ß√£o de funil
           - Novos sistemas de scoring
           - Integra√ß√£o de dados externos
        
        Para cada sugest√£o:
        - Descri√ß√£o clara
        - Impacto esperado (%)
        - Esfor√ßo de implementa√ß√£o (1-5)
        - ROI estimado
        - C√≥digo/exemplo quando aplic√°vel
        
        Retorne JSON estruturado.
        `;
        
        const result = await this.model.generateContent(prompt);
        return JSON.parse(result.response.text());
    }

    async generatePromptOptimizations(improvements) {
        const prompt = `
        Baseado nas melhorias identificadas, gere OTIMIZA√á√ïES ESPEC√çFICAS DE PROMPT:
        
        MELHORIAS: ${JSON.stringify(improvements, null, 2)}
        
        Crie:
        1. NOVOS PROMPTS otimizados para cada est√°gio
        2. VARIA√á√ïES A/B para testar
        3. T√âCNICAS DE PERSUAS√ÉO espec√≠ficas
        4. TRATAMENTO DE OBJE√á√ïES melhorado
        5. PERSONALIZA√á√ÉO avan√ßada
        
        Para cada otimiza√ß√£o:
        - Prompt original vs otimizado
        - Justificativa da mudan√ßa
        - M√©tricas para medir sucesso
        - Implementa√ß√£o t√©cnica
        
        Retorne c√≥digo JavaScript pronto para usar.
        `;
        
        const result = await this.model.generateContent(prompt);
        return result.response.text();
    }

    async generateExecutiveSummary(allAnalysis) {
        const prompt = `
        Crie um RESUMO EXECUTIVO da an√°lise completa:
        
        AN√ÅLISE COMPLETA: ${JSON.stringify(allAnalysis, null, 2)}
        
        Gere um resumo que inclua:
        
        1. SITUA√á√ÉO ATUAL (3-5 pontos principais)
        2. PRINCIPAIS DESCOBERTAS (insights cr√≠ticos)
        3. OPORTUNIDADES DE MELHORIA (top 5 com impacto)
        4. RECOMENDA√á√ïES PRIORIT√ÅRIAS (a√ß√µes imediatas)
        5. PROJE√á√ÉO DE RESULTADOS (metas realistas)
        
        Tom: Executivo, direto, orientado a resultados.
        Formato: Markdown com emojis estrat√©gicos.
        Tamanho: M√°ximo 500 palavras.
        `;
        
        const result = await this.model.generateContent(prompt);
        return result.response.text();
    }

    async generateDetailedReport(analysisResults) {
        const reportData = {
            timestamp: new Date().toISOString(),
            ...analysisResults
        };
        
        // Salva relat√≥rio detalhado
        const fs = require('fs');
        const filename = `ai-analysis-report-${Date.now()}.json`;
        fs.writeFileSync(filename, JSON.stringify(reportData, null, 2));
        
        console.log(`üìä Relat√≥rio detalhado salvo: ${filename}`);
        return filename;
    }
}

module.exports = { AIConversationAnalyzer };