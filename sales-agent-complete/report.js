require('dotenv').config();
const { getAllLeads } = require('./database');
const { sendWhatsAppMessage } = require('./utils');

class ReportManager {
    constructor() {
        this.adminNumbers = process.env.ADMIN_WHATSAPP_NUMBERS?.split(',') || [];
    }

    async generateDailyReport() {
        try {
            console.log('üìä Gerando relat√≥rio di√°rio...');
            
            const leads = await getAllLeads();
            const now = new Date();
            const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            
            // Leads criados nas √∫ltimas 24h
            const newLeads = leads.filter(lead => {
                const createdAt = new Date(lead.created_at || lead.last_interaction_timestamp);
                return createdAt >= yesterday;
            });
            
            // Leads que interagiram nas √∫ltimas 24h
            const activeLeads = leads.filter(lead => {
                const lastInteraction = new Date(lead.last_interaction_timestamp);
                return lastInteraction >= yesterday;
            });
            
            // Estat√≠sticas por est√°gio
            const stageStats = {};
            leads.forEach(lead => {
                const stage = `Est√°gio ${lead.stage}`;
                stageStats[stage] = (stageStats[stage] || 0) + 1;
            });
            
            // Estat√≠sticas por interesse
            const interestStats = {};
            leads.forEach(lead => {
                const interest = lead.interest_level || 'N√£o definido';
                interestStats[interest] = (interestStats[interest] || 0) + 1;
            });
            
            // Leads qualificados (est√°gio 4+)
            const qualifiedLeads = leads.filter(lead => lead.stage >= 4);
            
            // Taxa de convers√£o
            const conversionRate = leads.length > 0 ? 
                ((qualifiedLeads.length / leads.length) * 100).toFixed(1) : 0;
            
            // Monta o relat√≥rio
            const report = `üåü *RELAT√ìRIO DI√ÅRIO CRM*\n${now.toLocaleDateString('pt-BR')}\n\n` +
                `üìà *RESUMO GERAL*\n` +
                `‚Ä¢ Total de Leads: ${leads.length}\n` +
                `‚Ä¢ Novos Leads (24h): ${newLeads.length}\n` +
                `‚Ä¢ Leads Ativos (24h): ${activeLeads.length}\n` +
                `‚Ä¢ Taxa de Convers√£o: ${conversionRate}%\n\n` +
                
                `üéØ *POR EST√ÅGIO*\n` +
                Object.entries(stageStats)
                    .map(([stage, count]) => `‚Ä¢ ${stage}: ${count}`)
                    .join('\n') + '\n\n' +
                
                `üí° *POR INTERESSE*\n` +
                Object.entries(interestStats)
                    .map(([interest, count]) => `‚Ä¢ ${interest}: ${count}`)
                    .join('\n') + '\n\n' +
                
                `üèÜ *LEADS QUALIFICADOS*\n` +
                `‚Ä¢ Total: ${qualifiedLeads.length}\n`;
            
            // Adiciona top 5 leads mais promissores
            const topLeads = leads
                .filter(lead => lead.interest_level === 'Alto' && lead.stage >= 2)
                .slice(0, 5);
                
            if (topLeads.length > 0) {
                const topLeadsText = topLeads
                    .map((lead, index) => 
                        `${index + 1}. ${lead.name || 'N/A'} - Est√°gio ${lead.stage}`
                    )
                    .join('\n');
                    
                report += `\nüî• *TOP 5 LEADS PROMISSORES*\n${topLeadsText}`;
            }
            
            return report;
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar relat√≥rio:', error);
            return `‚ùå Erro ao gerar relat√≥rio di√°rio: ${error.message}`;
        }
    }

    async sendDailyReport() {
        try {
            console.log('üì§ Enviando relat√≥rio di√°rio...');
            
            const report = await this.generateDailyReport();
            
            if (this.adminNumbers.length === 0) {
                console.log('‚ö†Ô∏è Nenhum n√∫mero de admin configurado');
                console.log('Relat√≥rio gerado:');
                console.log(report);
                return;
            }
            
            let successCount = 0;
            let errorCount = 0;
            
            for (const adminNumber of this.adminNumbers) {
                try {
                    await sendWhatsAppMessage(adminNumber.trim(), report);
                    successCount++;
                    console.log(`‚úÖ Relat√≥rio enviado para ${adminNumber}`);
                    
                    // Delay entre envios
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                } catch (error) {
                    console.error(`‚ùå Erro ao enviar para ${adminNumber}:`, error);
                    errorCount++;
                }
            }
            
            console.log(`üìä Relat√≥rio enviado:`);
            console.log(`   ‚úÖ Sucessos: ${successCount}`);
            console.log(`   ‚ùå Erros: ${errorCount}`);
            
            return {
                success: successCount,
                errors: errorCount,
                total: this.adminNumbers.length
            };
            
        } catch (error) {
            console.error('‚ùå Erro ao enviar relat√≥rio:', error);
            throw error;
        }
    }

    async generateWeeklyReport() {
        try {
            console.log('üìä Gerando relat√≥rio semanal...');
            
            const leads = await getAllLeads();
            const now = new Date();
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            // Leads da √∫ltima semana
            const weekLeads = leads.filter(lead => {
                const lastInteraction = new Date(lead.last_interaction_timestamp);
                return lastInteraction >= weekAgo;
            });
            
            // Progress√£o de est√°gios na semana
            const stageProgression = {};
            weekLeads.forEach(lead => {
                const stage = lead.stage;
                stageProgression[stage] = (stageProgression[stage] || 0) + 1;
            });
            
            const report = `üìÖ *RELAT√ìRIO SEMANAL*\n${now.toLocaleDateString('pt-BR')}\n\n` +
                `üìà *RESUMO DA SEMANA*\n` +
                `‚Ä¢ Total de Leads: ${leads.length}\n` +
                `‚Ä¢ Leads Ativos (7 dias): ${weekLeads.length}\n\n` +
                
                `üéØ *DISTRIBUI√á√ÉO POR EST√ÅGIO*\n` +
                Object.entries(stageProgression)
                    .sort(([a], [b]) => parseInt(a) - parseInt(b))
                    .map(([stage, count]) => `‚Ä¢ Est√°gio ${stage}: ${count}`)
                    .join('\n');
            
            return report;
            
        } catch (error) {
            console.error('‚ùå Erro ao gerar relat√≥rio semanal:', error);
            return `‚ùå Erro ao gerar relat√≥rio semanal: ${error.message}`;
        }
    }
}

// Execu√ß√£o principal
async function main() {
    try {
        const reportManager = new ReportManager();
        
        // Verifica argumentos da linha de comando
        const args = process.argv.slice(2);
        const reportType = args[0] || 'daily';
        
        if (reportType === 'weekly') {
            const report = await reportManager.generateWeeklyReport();
            console.log('üìä Relat√≥rio semanal gerado:');
            console.log(report);
        } else {
            await reportManager.sendDailyReport();
        }
        
        console.log('üéâ Relat√≥rio executado com sucesso!');
        process.exit(0);
        
    } catch (error) {
        console.error('üí• Erro fatal no relat√≥rio:', error);
        process.exit(1);
    }
}

// Executa se chamado diretamente
if (require.main === module) {
    main();
}

module.exports = { ReportManager };