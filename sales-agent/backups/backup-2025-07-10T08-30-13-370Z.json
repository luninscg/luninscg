{
  "timestamp": "2025-07-10T08:30:13.365Z",
  "files": {
    "index.js": "// index.js (v36.2 - com Leitura Din√¢mica do Prompt e Rastreio de Campanha)\nrequire('dotenv').config();\nconst express = require('express');\nconst axios = require('axios');\nconst { initializeDb, getLead, addLead, updateLead, addMessage, getMessages } = require('./database');\nconst dashboardRouter = require('./dashboard');\nconst { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require('@google/generative-ai');\nconst { sendWhatsAppMessage } = require('./utils');\nconst { gerarPropostaEnergiaSolar } = require('./propostaGenerator');\nconst schedule = require('node-schedule');\nconst fs = require('fs');\nconst util = require('util');\nconst log_file = fs.createWriteStream(__dirname + '/server.log', {flags : 'w'});\nconst log_stdout = process.stdout;\n\nconsole.log = function(d) { //\n  log_file.write(util.format(d) + '\\n');\n  log_stdout.write(util.format(d) + '\\n');\n};\n\n\nconst { systemPrompt } = require('./prompt.js');\n\n// --- MECANISMO DE TRAVA PARA EVITAR PROCESSAMENTO DUPLICADO ---\nconst processingUsers = new Set();\n\n// --- Valida√ß√£o de Vari√°veis de Ambiente ---\nconst requiredEnvVars = [ 'EVOLUTION_API_URL', 'EVOLUTION_API_KEY', 'EVOLUTION_INSTANCE_NAME', 'GEMINI_API_KEY', 'ADMIN_WHATSAPP_NUMBER_1' ];\nfor (const varName of requiredEnvVars) { if (!process.env[varName]) { console.error(`ERRO CR√çTICO: A vari√°vel de ambiente ${varName} n√£o est√° definida.`); process.exit(1); } }\n\n// --- INICIALIZA√á√ÉO DO SERVIDOR EXPRESS ---\nconst app = express();\napp.use(express.json());\n\n// --- CONFIGURA√á√ïES E CONSTANTES ---\nconst PORT = process.env.PORT || 8080; // Use 8080 para o Cloud Run\nconst EVOLUTION_API_URL = process.env.EVOLUTION_API_URL;\nconst EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY;\nconst EVOLUTION_INSTANCE_NAME = process.env.EVOLUTION_INSTANCE_NAME;\n\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\nconst ADMIN_WHATSAPP_NUMBER_1 = process.env.ADMIN_WHATSAPP_NUMBER_1;\nconst ADMIN_WHATSAPP_NUMBER_2 = process.env.ADMIN_WHATSAPP_NUMBER_2;\nconst INTENTION_TO_CLOSE_STAGE = 5;\nconst FINAL_STAGE_GATE = 8;\n\n// Cliente Axios pr√©-configurado para a Evolution API\nconst evolutionApi = axios.create({\n    baseURL: EVOLUTION_API_URL,\n    headers: { 'apikey': EVOLUTION_API_KEY }\n});\n\n// --- INICIALIZA√á√ÉO DAS APIS ---\nconsole.log(\"Inicializando clientes de API...\");\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\nconst safetySettings = [\n    { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },\n    { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },\n    { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },\n    { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },\n];\nconst geminiFlashModel = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\", safetySettings });\nconst geminiProModel = genAI.getGenerativeModel({ model: \"gemini-1.5-pro\", safetySettings });\napp.use('/dashboard', dashboardRouter);\nconsole.log(\"Clientes de API inicializados com sucesso.\");\n\n// --- FUN√á√ïES AUXILIARES ---\n\nasync function sendAdminNotification(type, data) {\n    let message_to_gestor1 = null;\n    let message_to_gestor2 = null;\n    switch (type) {\n        case 'NEW_LEAD': message_to_gestor1 = `üëã Novo Lead!\\n*Contato:* ${data.from}`; break;\n        case 'HIGH_INTEREST': message_to_gestor1 = message_to_gestor2 = `üî• Interesse Alto Detectado!\\n\\n*Nome:* ${data.name || 'N/A'}\\n*Contato:* ${data.from}\\n*N√≠vel:* *${data.interest}*`; break;\n        case 'QUALIFIED_LEAD': message_to_gestor1 = message_to_gestor2 = `üèÜ‚ú® LEAD QUENTE (INTEN√á√ÉO DE FECHAR)! ‚ú®üèÜ\\n\\n*Cliente:* ${data.name}\\n*Contato:* ${data.from}\\n\\n*Resumo da IA:*\\n_${data.summary || 'Cliente aceitou a proposta.'}_\\n\\n*N√≠vel de Interesse:* *${data.interest || 'Alto'}*`; break;\n        case 'HUMAN_INTERVENTION': message_to_gestor1 = message_to_gestor2 = `üÜò AJUDA SOLICITADA!\\n\\n*Contato:* ${data.from}\\n*Motivo:* Cliente pediu para falar com um humano.`; break;\n        case 'SYSTEM_ERROR': message_to_gestor1 = `üÜò ERRO GRAVE NO BOT üÜò\\n\\nFalha em msg de ${data.from}.\\n\\n*Erro:* ${data.errorMessage}`; break;\n    }\n    if (message_to_gestor1 && ADMIN_WHATSAPP_NUMBER_1) await sendWhatsAppMessage(ADMIN_WHATSAPP_NUMBER_1, message_to_gestor1);\n    if (message_to_gestor2 && ADMIN_WHATSAPP_NUMBER_2 && ADMIN_WHATSAPP_NUMBER_2 !== ADMIN_WHATSAPP_NUMBER_1) await sendWhatsAppMessage(ADMIN_WHATSAPP_NUMBER_2, message_to_gestor2);\n}\n\nasync function getAiResponse(history, userInput, currentStage, knownData, dossierContent = null, proposalData = null) {\n    try {\n        console.log(\"[DEBUG] Iniciando getAiResponse...\");\n        const chat = geminiFlashModel.startChat({ systemInstruction: { role: \"system\", parts: [{ text: systemPrompt }] }, history });\n        console.log(\"[DEBUG] Chat iniciado com sucesso\");\n        const proposalInstruction = proposalData ? `DADOS DA PROPOSTA CALCULADA: ${JSON.stringify(proposalData)}.` : '';\n        const dossierInstruction = dossierContent ? `INFORMA√á√ÉO DO DOSSI√ä: \"${dossierContent}\".` : '';\n        const promptForModel = `INSTRU√á√ÉO INTERNA: Est√°gio: ${currentStage}. Dados conhecidos: ${JSON.stringify(knownData)}. Input do cliente: \"${userInput}\". ${proposalInstruction} ${dossierInstruction} Responda em JSON.`;\n        console.log(\"[DEBUG] Enviando mensagem para IA...\");\n        const result = await chat.sendMessage(promptForModel);\n        console.log(\"[DEBUG] Resposta recebida da IA\");\n        const responseText = result.response.text();\n        console.log(\"Resposta bruta do Gemini:\", responseText);\n        const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) return JSON.parse(jsonMatch[0]);\n        throw new Error(\"Nenhum JSON v√°lido na resposta da IA.\");\n    } catch (e) {\n        console.error(\"ERRO CR√çTICO EM getAiResponse:\", e);\n        return { response_messages: [\"Desculpe, tive uma instabilidade. Um de nossos especialistas j√° foi notificado e entrar√° em contato.\"], next_stage: currentStage };\n    }\n}\n\nasync function processMedia(messageObject) {\n    try {\n        const mediaResponse = await evolutionApi.post(`/chat/getBase64FromMediaMessage/${EVOLUTION_INSTANCE_NAME}`, { message: messageObject });\n        const { base64: base64Data, mimetype: mimeType } = mediaResponse.data;\n        if (!base64Data || !mimeType) throw new Error(\"Dados da m√≠dia em base64 n√£o obtidos.\");\n        const filePart = { inlineData: { data: base64Data, mimeType } };\n        \n        let prompt = mimeType.startsWith('audio/')\n            ? \"Transcreva este √°udio na √≠ntegra. Retorne apenas o texto.\"\n            : `Voc√™ √© um especialista em an√°lise de faturas de energia el√©trica brasileiras da ENERGISA, CEMIG, CPFL, ENEL e outras distribuidoras.\n               \n               ANALISE ESTA FATURA E EXTRAIA OS DADOS ESSENCIAIS:\n               \n               PROCURE POR:\n               - Nome do titular (geralmente no topo da fatura)\n               - CPF/CNPJ (formato XXX.XXX.XXX-XX ou XX.XXX.XXX/XXXX-XX)\n               - Endere√ßo de instala√ß√£o (diferente do endere√ßo de correspond√™ncia)\n               - Consumo em kWh (procure por \"Consumo\" ou \"kWh\")\n               - Valor total da fatura (valor final a pagar)\n               - CIP/Contribui√ß√£o Ilumina√ß√£o P√∫blica (taxa municipal)\n               - Tipo de liga√ß√£o: Monof√°sica, Bif√°sica ou Trif√°sica\n               - Tarifa de energia (R$/kWh)\n               \n               RETORNE APENAS ESTE JSON:\n               {\n                 \"nomeTitular\": \"nome completo ou null\",\n                 \"documentoTitular\": \"apenas n√∫meros ou null\",\n                 \"enderecoCompleto\": \"endere√ßo completo ou null\",\n                 \"consumoKwh\": n√∫mero ou null,\n                 \"valorTotal\": n√∫mero ou null,\n                 \"valorCip\": n√∫mero ou null,\n                 \"tarifaEnergiaKwh\": n√∫mero ou null,\n                 \"tipoConexao\": \"MONOFASICO/BIFASICO/TRIFASICO ou null\",\n                 \"confianca\": \"ALTA/MEDIA/BAIXA\"\n               }\n               \n               REGRAS CR√çTICAS:\n               - Use apenas n√∫meros para valores (ex: 150.75, n√£o \"R$ 150,75\")\n               - Se n√£o conseguir ler algo com certeza, use null\n               - Indique sua confian√ßa na extra√ß√£o\n               - Se n√£o for uma fatura de energia, retorne: {\"error\": \"N√£o √© uma fatura de energia\"}`;\n        \n        // Usar Gemini Pro para melhor precis√£o\n        const result = await geminiProModel.generateContent([prompt, filePart]);\n        const cleanedText = result.response.text().replace(/```json|```/g, '').trim();\n        \n        if (mimeType.startsWith('audio/')) {\n            return { type: 'audio_transcription', data: { transcription: cleanedText } };\n        } else {\n            try {\n                const parsedData = JSON.parse(cleanedText || '{}');\n                \n                if (parsedData.error) {\n                    console.log(`[OCR] Arquivo rejeitado: ${parsedData.error}`);\n                    return { type: 'media_analysis', data: parsedData };\n                }\n                \n                // Valida√ß√£o e limpeza dos dados\n                const validatedData = validateAndCleanOCRData(parsedData);\n                console.log('[OCR] Dados extra√≠dos e validados:', JSON.stringify(validatedData, null, 2));\n                \n                return { type: 'media_analysis', data: validatedData };\n            } catch (parseError) {\n                console.error('[OCR] Erro ao fazer parse do JSON:', parseError);\n                // Tentar extra√ß√£o com prompt mais simples\n                return await fallbackOCR(filePart);\n            }\n        }\n    } catch (error) {\n        console.error(\"Erro em processMedia:\", error.response?.data || error);\n        return { type: 'media_analysis', data: { error: \"Falha ao processar o arquivo de m√≠dia.\" } };\n    }\n}\n\n\n\nfunction calculateProposal(faturaData) {\n    const { valorTotal, valorCip, tipoConexao, tarifaEnergiaKwh } = faturaData;\n    const custoDisponibilidadeKwh = { 'MONOFASICO': 30, 'BIFASICO': 50, 'TRIFASICO': 100 };\n    const taxaMinimaKwh = custoDisponibilidadeKwh[tipoConexao?.toUpperCase()] || 50;\n    const taxaMinimaValor = taxaMinimaKwh * (parseFloat(tarifaEnergiaKwh) || 0.8);\n    const baseDeCalculo = parseFloat(valorTotal || 0) - parseFloat(valorCip || 0) - taxaMinimaValor;\n    if (baseDeCalculo <= 0) return null;\n    const economiaMensal = baseDeCalculo * 0.20;\n    return {\n        economiaMensal: economiaMensal.toFixed(2).replace('.', ','),\n        economiaAnual: (economiaMensal * 12).toFixed(2).replace('.', ','),\n        economia5Anos: (economiaMensal * 60).toFixed(2).replace('.', ','),\n    };\n}\n\nasync function processIncomingMessage(message) {\n    const from = message.from;\n    let textInput = null, dossierContent = null, proposalData = null, extractedDataForSheet = null;\n    \n    try {\n        console.log(`[${from}] Iniciando processamento da mensagem...`);\n\n    if (message.type === 'text') {\n        textInput = message.text.body.trim();\n        console.log(`[${from}] Buscando no dossi√™...`);\n        \n        console.log(`[${from}] Dossi√™ processado:`, dossierContent ? 'encontrado' : 'n√£o encontrado');\n    } else if (message.type === 'audio' || message.type === 'image' || message.type === 'document') {\n        const mediaResult = await processMedia(message.originalMessage);\n        if (message.type === 'audio') {\n            textInput = mediaResult.data?.transcription || \"Falha ao transcrever o √°udio.\";\n        } else {\n            extractedDataForSheet = mediaResult.data;\n            textInput = mediaResult.data?.error ? `An√°lise da Fatura Falhou: ${mediaResult.data.error}` : \"An√°lise da Fatura Conclu√≠da.\";\n        }\n    }\n\n    if (!textInput) return console.log(`[${from}] Mensagem ignorada.`);\n\n    await addMessage(from, 'user', textInput);\n\n    let userRow = await getLead(from);\n    const currentUserStage = userRow ? userRow.stage : 0;\n    console.log(`[${from}] Usu√°rio encontrado:`, !!userRow, `Est√°gio atual:`, currentUserStage);\n    \n    // NOVO: L√≥gica de Rastreio de Campanha\n    const leadSource = userRow ? userRow.source : 'Organico';\n    console.log(`[${from}] Fonte do lead identificada: *${leadSource}*`);\n\n\n    if (currentUserStage >= FINAL_STAGE_GATE && currentUserStage !== 8) return console.log(`[${from}] Usu√°rio no est√°gio final.`);\n\n    if (currentUserStage === 8) { // Est√°gio de Gera√ß√£o de Proposta\n        console.log(`[${from}] EST√ÅGIO 10: Iniciando gera√ß√£o de proposta...`);\n        const leadData = await getLead(from);\n        if (leadData && leadData.name && leadData.cpf && leadData.consumo_medio && leadData.taxa_iluminacao && leadData.address_logradouro) {\n            const propostaResult = await gerarPropostaEnergiaSolar({\n                nome: leadData.name,\n                cpf: leadData.cpf,\n                whatsapp: from,\n                sessionId: leadData.protocol, // Usando o protocolo como sessionId\n                endereco: {\n                    logradouro: leadData.address_logradouro,\n                    numero: leadData.address_numero,\n                    bairro: leadData.address_bairro,\n                    cidade: leadData.address_cidade,\n                    uf: leadData.address_uf\n                },\n                consumo_medio: leadData.consumo_medio,\n                taxa_iluminacao: leadData.taxa_iluminacao,\n                tipo_conexao: leadData.tipo_conexao\n            });\n\n            if (propostaResult.sucesso) {\n                console.log(`[${from}] Proposta gerada e enviada via webhook com sucesso.`);\n                // A IA ser√° informada no pr√≥ximo passo que a proposta foi enviada.\n                textInput = \"INSTRU√á√ÉO INTERNA: A proposta foi gerada e enviada com sucesso. Informe o cliente e pergunte o que ele achou.\";\n            } else {\n                console.error(`[${from}] Falha ao gerar proposta:`, propostaResult.mensagem);\n                textInput = `INSTRU√á√ÉO INTERNA: Ocorreu um erro ao gerar a proposta: ${propostaResult.mensagem}. Informe o cliente sobre o erro e diga que um especialista ir√° verificar.`;\n            }\n        } else {\n            console.error(`[${from}] Dados insuficientes para gerar proposta.`);\n            textInput = \"INSTRU√á√ÉO INTERNA: Dados insuficientes para gerar a proposta. Pe√ßa ao cliente para confirmar as informa√ß√µes que faltam.\";\n        }\n    }\n\n    if (currentUserStage === 3) {\n        if (extractedDataForSheet && !extractedDataForSheet.error) {\n            proposalData = calculateProposal(extractedDataForSheet);\n        } else if (!isNaN(parseFloat(textInput))) {\n            const billValue = parseFloat(textInput);\n            const monthlySavings = (billValue - 50) * 0.20;\n            if (monthlySavings > 0) proposalData = { economiaMensal: monthlySavings.toFixed(2), economiaAnual: (monthlySavings * 12).toFixed(2), economia5Anos: (monthlySavings * 60).toFixed(2) };\n        }\n        if (proposalData) textInput += ` Proposta calculada.`;\n    }\n\n    console.log(`[${from}] Obtendo hist√≥rico e dados conhecidos...`);\n    const history = (await getMessages(from)).map(msg => ({\n        role: msg.sender === 'user' ? 'user' : 'model',\n        parts: [{ text: msg.message }]\n    }));\n    const knownData = userRow ? { name: userRow.name, cpf: userRow.cpf, email: userRow.email } : {};\n    console.log(`[${from}] Hist√≥rico carregado, tamanho:`, history.length, `Dados conhecidos:`, Object.keys(knownData));\n    \n    console.log(`[${from}] Est√°gio: ${currentUserStage}. Processando input para IA: \"${textInput}\"`);\n    console.log(`[${from}] Chamando getAiResponse...`);\n    const aiResponse = await getAiResponse(history, textInput, currentUserStage, knownData, dossierContent, proposalData);\n    console.log(`[${from}] getAiResponse retornou:`, JSON.stringify(aiResponse));\n\n    // Verifica se h√° mensagens para enviar (suporta tanto response_messages quanto response_message)\n    const messagesToSend = aiResponse.response_messages || (aiResponse.response_message ? aiResponse.response_message.split('|||') : []);\n    \n    if (messagesToSend?.length) {\n        console.log(`[${from}] Enviando ${messagesToSend.length} mensagem(ns) para o WhatsApp...`);\n        for (const msg of messagesToSend) {\n            const trimmedMsg = msg.trim();\n            if (trimmedMsg) {\n                // Adiciona um delay vari√°vel para simular digita√ß√£o\n                const delayMatch = trimmedMsg.match(/^delay:(\\d+)/);\n                if (delayMatch) {\n                    const delayMs = parseInt(delayMatch[1], 10);\n                    console.log(`[${from}] Atrasando por ${delayMs}ms...`);\n                    await new Promise(resolve => setTimeout(resolve, delayMs));\n                } else {\n                    console.log(`[${from}] Enviando: \"${trimmedMsg.substring(0, 50)}...\"`);\n                    await sendWhatsAppMessage(from, trimmedMsg);\n                    await addMessage(from, 'agent', trimmedMsg); // Salva a mensagem do agente\n                }\n            }\n        }\n        const dataToUpdate = {\n            stage: aiResponse.next_stage, last_interaction_timestamp: new Date().toISOString(),\n            ...Object.fromEntries(Object.entries(aiResponse).filter(([k, v]) => v && ['name', 'cpf', 'email', 'address', 'summary', 'interest_level'].includes(k)))\n        };\n        if (extractedDataForSheet && !extractedDataForSheet.error) {\n            Object.assign(dataToUpdate, { fatura_nome_titular: extractedDataForSheet.nomeTitular, fatura_cpf_cnpj_titular: extractedDataForSheet.documentoTitular, /* ...outros campos da fatura... */ });\n        }\n\n        if (!userRow) {\n            await addLead({ whatsapp_number: from, protocol: new Date().getTime(), source: 'Organico', ...dataToUpdate });\n            await sendAdminNotification('NEW_LEAD', { from });\n        } else {\n            const previousInterest = userRow.interest_level;\n            await updateLead(from, dataToUpdate);\n            const { next_stage: newStage, interest_level: newInterest } = aiResponse;\n            if (newStage >= INTENTION_TO_CLOSE_STAGE && currentUserStage < INTENTION_TO_CLOSE_STAGE) {\n                await sendAdminNotification('QUALIFIED_LEAD', { from, name: userRow.name, summary: aiResponse.summary, interest: newInterest });\n            } else if ((newInterest === 'Alto' || newInterest === 'Quente') && newInterest !== previousInterest) {\n                await sendAdminNotification('HIGH_INTEREST', { from, name: userRow.name, interest: newInterest });\n            } else if (newInterest === 'Precisa de Interven√ß√£o Humana' && newInterest !== previousInterest) {\n                await sendAdminNotification('HUMAN_INTERVENTION', { from });\n            }\n        }\n    }\n    \n    } catch (error) {\n        console.error(`[${from}] ERRO FATAL em processIncomingMessage:`, error);\n        throw error; // Re-throw para que seja capturado pelo webhook\n    }\n}\n\n// --- AGENDAMENTO DE TAREFAS (DESATIVADO) ---\n// const schedule = require('node-schedule');\n\n\n\n// --- ROTAS E INICIALIZA√á√ÉO DO SERVIDOR ---\napp.post('/reset-user', async (req, res) => {\n    const { number } = req.body;\n    if (!number) {\n        return res.status(400).send({ error: 'O n√∫mero do usu√°rio √© obrigat√≥rio.' });\n    }\n\n    try {\n        const user = await getLead(number);\n        if (user) {\n            await updateLead(number, { stage: 0 });\n            // Opcional: Limpar o hist√≥rico de mensagens tamb√©m\n            // await db.run('DELETE FROM messages WHERE lead_whatsapp = ?', [number]);\n            console.log(`[${number}] Est√°gio do usu√°rio resetado para 0.`);\n            res.send({ success: `Est√°gio do usu√°rio ${number} resetado para 0.` });\n        } else {\n            res.status(404).send({ error: 'Usu√°rio n√£o encontrado.' });\n        }\n    } catch (error) {\n        console.error(`[${number}] Erro ao resetar o est√°gio do usu√°rio:`, error);\n        res.status(500).send({ error: 'Erro interno ao resetar o est√°gio do usu√°rio.' });\n    }\n});\n\napp.get('/', (req, res) => res.send('Servidor do Bot (Evolution API) est√° no ar! ‚òÄÔ∏è'));\n\napp.post('/webhook', (req, res) => {\n    res.sendStatus(200);\n    const eventData = req.body;\n    if (eventData.event !== 'messages.upsert' || eventData.data?.key?.fromMe) return;\n    const rawMessage = eventData.data;\n    const messageContent = rawMessage.message;\n    if (!messageContent) return;\n\n    const message = { from: rawMessage.key.remoteJid.split('@')[0], type: '', originalMessage: rawMessage };\n    if (messageContent.extendedTextMessage?.text) {\n        message.type = 'text'; message.text = { body: messageContent.extendedTextMessage.text };\n    } else if (messageContent.conversation) {\n        message.type = 'text'; message.text = { body: messageContent.conversation };\n    } else if (messageContent.audioMessage) { message.type = 'audio'; }\n    else if (messageContent.imageMessage) { message.type = 'image'; }\n    else if (messageContent.documentMessage) { message.type = 'document'; }\n    else { return; }\n\n    if (processingUsers.has(message.from)) return console.log(`[${message.from}] MENSAGEM IGNORADA: Processamento em andamento.`);\n    \n    processingUsers.add(message.from);\n    console.log(`[${message.from}] Trava ativada. Processando tipo: ${message.type}`);\n    processIncomingMessage(message)\n        .catch(error => {\n            console.error(\"ERRO FATAL NO WEBHOOK:\", error);\n            sendAdminNotification('SYSTEM_ERROR', { from: message.from, errorMessage: error.message });\n        })\n        .finally(() => {\n            processingUsers.delete(message.from);\n            console.log(`[${message.from}] Processamento finalizado. Trava liberada.`);\n        });\n});\n\nasync function startServer() {\n    try {\n        initializeDb();\n        console.log(\"Banco de dados inicializado com sucesso.\");\n\n        const server = app.listen(PORT, () => {\n            console.log(`üöÄ Servidor iniciado na porta ${PORT}`);\n            console.log(`üîó Dashboard dispon√≠vel em http://localhost:${PORT}/dashboard`);\n        });\n\n        server.on('error', (err) => {\n            if (err.code === 'EADDRINUSE') {\n                console.error(`ERRO: A porta ${PORT} j√° est√° em uso. O servidor n√£o pode ser iniciado.`);\n                process.exit(1);\n            } else {\n                console.error('Ocorreu um erro inesperado no servidor:', err);\n            }\n        });\n\n    } catch (error) {\n        console.error(\"ERRO CR√çTICO AO INICIAR:\", error);\n        process.exit(1);\n    }\n}\n\nstartServer();\n\n\nfunction validateAndCleanOCRData(data) {\n    const cleaned = {};\n    \n    // Limpar e validar nome\n    if (data.nomeTitular && typeof data.nomeTitular === 'string') {\n        cleaned.nomeTitular = data.nomeTitular.trim().toUpperCase();\n    }\n    \n    // Limpar e validar CPF/CNPJ\n    if (data.documentoTitular) {\n        const doc = data.documentoTitular.toString().replace(/\\D/g, '');\n        if (doc.length === 11 || doc.length === 14) {\n            cleaned.documentoTitular = doc;\n        }\n    }\n    \n    // Validar consumo\n    if (data.consumoKwh && !isNaN(parseFloat(data.consumoKwh))) {\n        const consumo = parseFloat(data.consumoKwh);\n        if (consumo > 0 && consumo < 10000) { // Consumo razo√°vel\n            cleaned.consumoKwh = consumo;\n        }\n    }\n    \n    // Validar valor total\n    if (data.valorTotal && !isNaN(parseFloat(data.valorTotal))) {\n        const valor = parseFloat(data.valorTotal);\n        if (valor > 0 && valor < 50000) { // Valor razo√°vel\n            cleaned.valorTotal = valor;\n        }\n    }\n    \n    // Validar CIP\n    if (data.valorCip && !isNaN(parseFloat(data.valorCip))) {\n        const cip = parseFloat(data.valorCip);\n        if (cip >= 0 && cip < 1000) {\n            cleaned.valorCip = cip;\n        }\n    }\n    \n    // Validar tarifa\n    if (data.tarifaEnergiaKwh && !isNaN(parseFloat(data.tarifaEnergiaKwh))) {\n        const tarifa = parseFloat(data.tarifaEnergiaKwh);\n        if (tarifa > 0 && tarifa < 5) { // Tarifa razo√°vel\n            cleaned.tarifaEnergiaKwh = tarifa;\n        }\n    }\n    \n    // Validar tipo de conex√£o\n    if (data.tipoConexao) {\n        const tipo = data.tipoConexao.toUpperCase();\n        if (['MONOFASICO', 'BIFASICO', 'TRIFASICO'].includes(tipo)) {\n            cleaned.tipoConexao = tipo;\n        }\n    }\n    \n    // Limpar endere√ßo\n    if (data.enderecoCompleto && typeof data.enderecoCompleto === 'string') {\n        cleaned.enderecoCompleto = data.enderecoCompleto.trim();\n    }\n    \n    // Manter indicador de confian√ßa\n    cleaned.confianca = data.confianca || 'MEDIA';\n    \n    return cleaned;\n}",
    "dashboard.js": "const express = require('express');\nconst { getAllLeads, getLead, getMessages } = require('./database');\nconst fs = require('fs').promises;\n\nconst router = express.Router();\n\n// API de Estat√≠sticas\nrouter.get('/api/stats', async (req, res) => {\n    try {\n        const leads = await getAllLeads();\n        \n        const stats = {\n            totalLeads: leads.length,\n            leadsByStage: {},\n            leadsByInterest: {},\n            leadsBySource: {},\n            conversionRate: 0,\n            recentActivity: leads.slice(0, 5).map(lead => ({\n                name: lead.name || 'N/A',\n                whatsapp: lead.whatsapp_number,\n                stage: lead.stage,\n                lastInteraction: lead.last_interaction_timestamp\n            }))\n        };\n        \n        // Estat√≠sticas por est√°gio\n        leads.forEach(lead => {\n            const stage = `Est√°gio ${lead.stage}`;\n            stats.leadsByStage[stage] = (stats.leadsByStage[stage] || 0) + 1;\n        });\n        \n        // Estat√≠sticas por interesse\n        leads.forEach(lead => {\n            const interest = lead.interest_level || 'N√£o definido';\n            stats.leadsByInterest[interest] = (stats.leadsByInterest[interest] || 0) + 1;\n        });\n        \n        // Estat√≠sticas por fonte\n        leads.forEach(lead => {\n            const source = lead.source || 'Org√¢nico';\n            stats.leadsBySource[source] = (stats.leadsBySource[source] || 0) + 1;\n        });\n        \n        // Taxa de convers√£o (leads no est√°gio 5+ / total)\n        const convertedLeads = leads.filter(lead => lead.stage >= 5).length;\n        stats.conversionRate = leads.length > 0 ? ((convertedLeads / leads.length) * 100).toFixed(1) : 0;\n        \n        res.json(stats);\n    } catch (error) {\n        console.error('Error getting stats:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\n// API de Filtros\nrouter.get('/api/leads/filter', async (req, res) => {\n    try {\n        const { stage, interest, period, source } = req.query;\n        let leads = await getAllLeads();\n        \n        // Filtro por est√°gio\n        if (stage && stage !== 'all') {\n            leads = leads.filter(lead => lead.stage.toString() === stage);\n        }\n        \n        // Filtro por interesse\n        if (interest && interest !== 'all') {\n            leads = leads.filter(lead => lead.interest_level === interest);\n        }\n        \n        // Filtro por fonte\n        if (source && source !== 'all') {\n            leads = leads.filter(lead => (lead.source || 'Org√¢nico') === source);\n        }\n        \n        // Filtro por per√≠odo\n        if (period && period !== 'all') {\n            const now = new Date();\n            const periodDays = {\n                '7': 7,\n                '30': 30,\n                '90': 90\n            };\n            \n            if (periodDays[period]) {\n                const cutoffDate = new Date(now.getTime() - (periodDays[period] * 24 * 60 * 60 * 1000));\n                leads = leads.filter(lead => {\n                    const lastInteraction = new Date(lead.last_interaction_timestamp);\n                    return lastInteraction >= cutoffDate;\n                });\n            }\n        }\n        \n        res.json(leads);\n    } catch (error) {\n        console.error('Error filtering leads:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\n// Dashboard Principal\nrouter.get('/', async (req, res) => {\n    try {\n        const leads = await getAllLeads();\n        const systemPrompt = await fs.readFile('./prompt.js', 'utf-8');\n\n        res.send(`\n            <!DOCTYPE html>\n            <html lang=\"pt-BR\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>CRM Dashboard Avan√ßado - Energia A</title>\n                <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n                <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\n                <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n                <style>\n                    :root {\n                        --primary-color: #2c5aa0;\n                        --secondary-color: #f8f9fa;\n                        --success-color: #28a745;\n                        --warning-color: #ffc107;\n                        --danger-color: #dc3545;\n                        --info-color: #17a2b8;\n                    }\n                    \n                    body {\n                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                        min-height: 100vh;\n                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    }\n                    \n                    .dashboard-container {\n                        background: rgba(255, 255, 255, 0.95);\n                        border-radius: 20px;\n                        box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n                        backdrop-filter: blur(10px);\n                        margin: 20px;\n                        padding: 30px;\n                    }\n                    \n                    .stats-card {\n                        background: linear-gradient(135deg, var(--primary-color), #3d6bb3);\n                        color: white;\n                        border-radius: 15px;\n                        padding: 25px;\n                        margin-bottom: 20px;\n                        box-shadow: 0 10px 30px rgba(44, 90, 160, 0.3);\n                        transition: transform 0.3s ease;\n                    }\n                    \n                    .stats-card:hover {\n                        transform: translateY(-5px);\n                    }\n                    \n                    .stats-number {\n                        font-size: 2.5rem;\n                        font-weight: bold;\n                        margin-bottom: 10px;\n                    }\n                    \n                    .stats-label {\n                        font-size: 1.1rem;\n                        opacity: 0.9;\n                    }\n                    \n                    .filters {\n                        background: white;\n                        border-radius: 15px;\n                        padding: 25px;\n                        margin-bottom: 30px;\n                        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n                    }\n                    \n                    .filter-group {\n                        margin-bottom: 20px;\n                    }\n                    \n                    .filter-group label {\n                        font-weight: 600;\n                        color: var(--primary-color);\n                        margin-bottom: 8px;\n                        display: block;\n                    }\n                    \n                    .filter-group select {\n                        border: 2px solid #e9ecef;\n                        border-radius: 10px;\n                        padding: 10px 15px;\n                        transition: border-color 0.3s ease;\n                    }\n                    \n                    .filter-group select:focus {\n                        border-color: var(--primary-color);\n                        box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);\n                    }\n                    \n                    .leads-table {\n                        background: white;\n                        border-radius: 15px;\n                        overflow: hidden;\n                        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n                    }\n                    \n                    .table th {\n                        background: var(--primary-color);\n                        color: white;\n                        border: none;\n                        padding: 15px;\n                        font-weight: 600;\n                    }\n                    \n                    .table td {\n                        padding: 15px;\n                        vertical-align: middle;\n                        border-color: #f8f9fa;\n                    }\n                    \n                    .stage-badge {\n                        padding: 6px 12px;\n                        border-radius: 20px;\n                        font-size: 0.85rem;\n                        font-weight: 600;\n                    }\n                    \n                    .interest-badge {\n                        padding: 4px 8px;\n                        border-radius: 15px;\n                        font-size: 0.8rem;\n                        font-weight: 500;\n                    }\n                    \n                    .btn-action {\n                        padding: 8px 16px;\n                        border-radius: 20px;\n                        font-size: 0.9rem;\n                        font-weight: 500;\n                        text-decoration: none;\n                        transition: all 0.3s ease;\n                    }\n                    \n                    .btn-action:hover {\n                        transform: translateY(-2px);\n                        box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n                    }\n                    \n                    .chart-container {\n                        background: white;\n                        border-radius: 15px;\n                        padding: 25px;\n                        margin-bottom: 30px;\n                        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n                    }\n                    \n                    .loading {\n                        text-align: center;\n                        padding: 50px;\n                        color: #6c757d;\n                    }\n                    \n                    .prompt-section {\n                        background: white;\n                        border-radius: 15px;\n                        padding: 25px;\n                        margin-top: 30px;\n                        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n                    }\n                    \n                    .prompt-textarea {\n                        border: 2px solid #e9ecef;\n                        border-radius: 10px;\n                        padding: 15px;\n                        font-family: 'Courier New', monospace;\n                        font-size: 0.9rem;\n                        transition: border-color 0.3s ease;\n                    }\n                    \n                    .prompt-textarea:focus {\n                        border-color: var(--primary-color);\n                        box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"dashboard-container\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <h1 class=\"display-4 fw-bold text-primary\">\n                            <i class=\"fas fa-chart-line me-3\"></i>CRM Dashboard\n                        </h1>\n                        <div class=\"text-muted\">\n                            <i class=\"fas fa-clock me-2\"></i>\n                            <span id=\"current-time\"></span>\n                        </div>\n                    </div>\n                    \n                    <!-- Estat√≠sticas -->\n                    <div class=\"row mb-4\" id=\"stats-container\">\n                        <div class=\"col-md-3\">\n                            <div class=\"stats-card\">\n                                <div class=\"stats-number\" id=\"total-leads\">-</div>\n                                <div class=\"stats-label\">\n                                    <i class=\"fas fa-users me-2\"></i>Total de Leads\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\">\n                            <div class=\"stats-card\" style=\"background: linear-gradient(135deg, var(--success-color), #34ce57);\">\n                                <div class=\"stats-number\" id=\"conversion-rate\">-</div>\n                                <div class=\"stats-label\">\n                                    <i class=\"fas fa-chart-line me-2\"></i>Taxa de Convers√£o\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\">\n                            <div class=\"stats-card\" style=\"background: linear-gradient(135deg, var(--warning-color), #ffcd39);\">\n                                <div class=\"stats-number\" id=\"active-leads\">-</div>\n                                <div class=\"stats-label\">\n                                    <i class=\"fas fa-fire me-2\"></i>Leads Ativos\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3\">\n                            <div class=\"stats-card\" style=\"background: linear-gradient(135deg, var(--info-color), #20c9e7);\">\n                                <div class=\"stats-number\" id=\"qualified-leads\">-</div>\n                                <div class=\"stats-label\">\n                                    <i class=\"fas fa-star me-2\"></i>Leads Qualificados\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <!-- Gr√°ficos -->\n                    <div class=\"row mb-4\">\n                        <div class=\"col-md-6\">\n                            <div class=\"chart-container\">\n                                <h5 class=\"mb-3\"><i class=\"fas fa-chart-pie me-2\"></i>Leads por Est√°gio</h5>\n                                <canvas id=\"stageChart\" width=\"400\" height=\"200\"></canvas>\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"chart-container\">\n                                <h5 class=\"mb-3\"><i class=\"fas fa-chart-bar me-2\"></i>Leads por Interesse</h5>\n                                <canvas id=\"interestChart\" width=\"400\" height=\"200\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <!-- Filtros -->\n                    <div class=\"filters\">\n                        <h5 class=\"mb-3\"><i class=\"fas fa-filter me-2\"></i>Filtros</h5>\n                        <div class=\"row\">\n                            <div class=\"col-md-3\">\n                                <div class=\"filter-group\">\n                                    <label for=\"filter-stage\">Est√°gio</label>\n                                    <select class=\"form-select\" id=\"filter-stage\">\n                                        <option value=\"all\">Todos os Est√°gios</option>\n                                        <option value=\"0\">Est√°gio 0 - Inicial</option>\n                                        <option value=\"1\">Est√°gio 1 - Contato</option>\n                                        <option value=\"2\">Est√°gio 2 - Interesse</option>\n                                        <option value=\"3\">Est√°gio 3 - Qualifica√ß√£o</option>\n                                        <option value=\"4\">Est√°gio 4 - Proposta</option>\n                                        <option value=\"5\">Est√°gio 5 - Negocia√ß√£o</option>\n                                        <option value=\"6\">Est√°gio 6 - Fechamento</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"filter-group\">\n                                    <label for=\"filter-interest\">Interesse</label>\n                                    <select class=\"form-select\" id=\"filter-interest\">\n                                        <option value=\"all\">Todos os N√≠veis</option>\n                                        <option value=\"Alto\">Alto</option>\n                                        <option value=\"M√©dio\">M√©dio</option>\n                                        <option value=\"Baixo\">Baixo</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"filter-group\">\n                                    <label for=\"filter-period\">Per√≠odo</label>\n                                    <select class=\"form-select\" id=\"filter-period\">\n                                        <option value=\"all\">Todos os Per√≠odos</option>\n                                        <option value=\"7\">√öltimos 7 dias</option>\n                                        <option value=\"30\">√öltimos 30 dias</option>\n                                        <option value=\"90\">√öltimos 90 dias</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"filter-group\">\n                                    <label for=\"filter-source\">Fonte</label>\n                                    <select class=\"form-select\" id=\"filter-source\">\n                                        <option value=\"all\">Todas as Fontes</option>\n                                        <option value=\"Org√¢nico\">Org√¢nico</option>\n                                        <option value=\"Facebook\">Facebook</option>\n                                        <option value=\"Google\">Google</option>\n                                        <option value=\"Instagram\">Instagram</option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row mt-3\">\n                            <div class=\"col-12\">\n                                <button class=\"btn btn-primary me-2\" onclick=\"applyFilters()\">\n                                    <i class=\"fas fa-search me-2\"></i>Aplicar Filtros\n                                </button>\n                                <button class=\"btn btn-outline-secondary\" onclick=\"clearFilters()\">\n                                    <i class=\"fas fa-times me-2\"></i>Limpar Filtros\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <!-- Tabela de Leads -->\n                    <div class=\"leads-table\">\n                        <h5 class=\"p-3 mb-0 bg-primary text-white\">\n                            <i class=\"fas fa-table me-2\"></i>Lista de Leads\n                            <span class=\"badge bg-light text-primary ms-2\" id=\"leads-count\">0</span>\n                        </h5>\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover mb-0\" id=\"leads-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Nome</th>\n                                        <th>WhatsApp</th>\n                                        <th>Est√°gio</th>\n                                        <th>Interesse</th>\n                                        <th>Fonte</th>\n                                        <th>√öltima Intera√ß√£o</th>\n                                        <th>A√ß√µes</th>\n                                    </tr>\n                                </thead>\n                                <tbody id=\"leads-tbody\">\n                                    <tr>\n                                        <td colspan=\"7\" class=\"loading\">\n                                            <i class=\"fas fa-spinner fa-spin me-2\"></i>Carregando leads...\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    \n                    <!-- Se√ß√£o do Prompt -->\n                    <div class=\"prompt-section\">\n                        <h5 class=\"mb-3\"><i class=\"fas fa-code me-2\"></i>System Prompt</h5>\n                        <form action=\"/dashboard/prompt\" method=\"post\">\n                            <textarea name=\"prompt\" class=\"form-control prompt-textarea\" rows=\"10\">${systemPrompt}</textarea>\n                            <button type=\"submit\" class=\"btn btn-success mt-3\">\n                                <i class=\"fas fa-save me-2\"></i>Salvar Prompt\n                            </button>\n                        </form>\n                    </div>\n                </div>\n                \n                <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n                <script>\n                    let stageChart, interestChart;\n                    \n                    // Atualizar hor√°rio\n                    function updateTime() {\n                        const now = new Date();\n                        document.getElementById('current-time').textContent = now.toLocaleString('pt-BR');\n                    }\n                    \n                    // Carregar estat√≠sticas\n                    async function loadStats() {\n                        try {\n                            const response = await fetch('/dashboard/api/stats');\n                            const stats = await response.json();\n                            \n                            document.getElementById('total-leads').textContent = stats.totalLeads;\n                            document.getElementById('conversion-rate').textContent = stats.conversionRate + '%';\n                            \n                            // Calcular leads ativos (est√°gios 1-4)\n                            const activeLeads = Object.entries(stats.leadsByStage)\n                                .filter(([stage]) => ['Est√°gio 1', 'Est√°gio 2', 'Est√°gio 3', 'Est√°gio 4'].includes(stage))\n                                .reduce((sum, [, count]) => sum + count, 0);\n                            document.getElementById('active-leads').textContent = activeLeads;\n                            \n                            // Calcular leads qualificados (est√°gio 5+)\n                            const qualifiedLeads = Object.entries(stats.leadsByStage)\n                                .filter(([stage]) => ['Est√°gio 5', 'Est√°gio 6', 'Est√°gio 7', 'Est√°gio 8'].includes(stage))\n                                .reduce((sum, [, count]) => sum + count, 0);\n                            document.getElementById('qualified-leads').textContent = qualifiedLeads;\n                            \n                            // Atualizar gr√°ficos\n                            updateCharts(stats);\n                        } catch (error) {\n                            console.error('Erro ao carregar estat√≠sticas:', error);\n                        }\n                    }\n                    \n                    // Atualizar gr√°ficos\n                    function updateCharts(stats) {\n                        // Gr√°fico de est√°gios\n                        const stageCtx = document.getElementById('stageChart').getContext('2d');\n                        if (stageChart) stageChart.destroy();\n                        \n                        stageChart = new Chart(stageCtx, {\n                            type: 'doughnut',\n                            data: {\n                                labels: Object.keys(stats.leadsByStage),\n                                datasets: [{\n                                    data: Object.values(stats.leadsByStage),\n                                    backgroundColor: [\n                                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',\n                                        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'\n                                    ]\n                                }]\n                            },\n                            options: {\n                                responsive: true,\n                                maintainAspectRatio: false,\n                                plugins: {\n                                    legend: {\n                                        position: 'bottom'\n                                    }\n                                }\n                            }\n                        });\n                        \n                        // Gr√°fico de interesse\n                        const interestCtx = document.getElementById('interestChart').getContext('2d');\n                        if (interestChart) interestChart.destroy();\n                        \n                        interestChart = new Chart(interestCtx, {\n                            type: 'bar',\n                            data: {\n                                labels: Object.keys(stats.leadsByInterest),\n                                datasets: [{\n                                    label: 'N√∫mero de Leads',\n                                    data: Object.values(stats.leadsByInterest),\n                                    backgroundColor: '#36A2EB',\n                                    borderColor: '#2C5AA0',\n                                    borderWidth: 2\n                                }]\n                            },\n                            options: {\n                                responsive: true,\n                                maintainAspectRatio: false,\n                                scales: {\n                                    y: {\n                                        beginAtZero: true\n                                    }\n                                }\n                            }\n                        });\n                    }\n                    \n                    // Carregar leads\n                    async function loadLeads(filters = {}) {\n                        try {\n                            const params = new URLSearchParams(filters);\n                            const response = await fetch('/dashboard/api/leads/filter?' + params);\n                            const leads = await response.json();\n                            \n                            const tbody = document.getElementById('leads-tbody');\n                            document.getElementById('leads-count').textContent = leads.length;\n                            \n                            if (leads.length === 0) {\n                                tbody.innerHTML = `\n                                    <tr>\n                                        <td colspan=\"7\" class=\"text-center text-muted py-4\">\n                                            <i class=\"fas fa-search me-2\"></i>Nenhum lead encontrado\n                                        </td>\n                                    </tr>\n                                `;\n                                return;\n                            }\n                            \n                            tbody.innerHTML = leads.map(lead => {\n                                const stageBadge = getStageBadge(lead.stage);\n                                const interestBadge = getInterestBadge(lead.interest_level);\n                                const lastInteraction = new Date(lead.last_interaction_timestamp).toLocaleString('pt-BR');\n                                \n                                return `\n                                    <tr>\n                                        <td>\n                                            <strong>${lead.name || 'N/A'}</strong>\n                                            ${lead.cpf ? '<br><small class=\"text-muted\">CPF: ' + lead.cpf + '</small>' : ''}\n                                        </td>\n                                        <td>\n                                            <a href=\"https://wa.me/${lead.whatsapp_number}\" target=\"_blank\" class=\"text-decoration-none\">\n                                                <i class=\"fab fa-whatsapp text-success me-1\"></i>\n                                                ${lead.whatsapp_number}\n                                            </a>\n                                        </td>\n                                        <td>${stageBadge}</td>\n                                        <td>${interestBadge}</td>\n                                        <td>\n                                            <span class=\"badge bg-secondary\">${lead.source || 'Org√¢nico'}</span>\n                                        </td>\n                                        <td>\n                                            <small>${lastInteraction}</small>\n                                        </td>\n                                        <td>\n                                            <a href=\"/dashboard/lead/${lead.whatsapp_number}\" class=\"btn btn-sm btn-primary btn-action\">\n                                                <i class=\"fas fa-eye me-1\"></i>Ver\n                                            </a>\n                                        </td>\n                                    </tr>\n                                `;\n                            }).join('');\n                        } catch (error) {\n                            console.error('Erro ao carregar leads:', error);\n                            document.getElementById('leads-tbody').innerHTML = `\n                                <tr>\n                                    <td colspan=\"7\" class=\"text-center text-danger py-4\">\n                                        <i class=\"fas fa-exclamation-triangle me-2\"></i>Erro ao carregar leads\n                                    </td>\n                                </tr>\n                            `;\n                        }\n                    }\n                    \n                    // Obter badge do est√°gio\n                    function getStageBadge(stage) {\n                        const stages = {\n                            0: { text: 'Inicial', class: 'bg-secondary' },\n                            1: { text: 'Contato', class: 'bg-info' },\n                            2: { text: 'Interesse', class: 'bg-primary' },\n                            3: { text: 'Qualifica√ß√£o', class: 'bg-warning' },\n                            4: { text: 'Proposta', class: 'bg-warning' },\n                            5: { text: 'Negocia√ß√£o', class: 'bg-success' },\n                            6: { text: 'Fechamento', class: 'bg-success' },\n                            7: { text: 'Finalizado', class: 'bg-dark' },\n                            8: { text: 'Perdido', class: 'bg-danger' }\n                        };\n                        \n                        const stageInfo = stages[stage] || { text: 'Est√°gio ' + stage, class: 'bg-secondary' };\n                        return '<span class=\"badge ' + stageInfo.class + ' stage-badge\">' + stageInfo.text + '</span>';\n                    }\n                    \n                    // Obter badge do interesse\n                    function getInterestBadge(interest) {\n                        if (!interest || interest === 'N/A') {\n                            return '<span class=\"badge bg-light text-dark interest-badge\">N/A</span>';\n                        }\n                        \n                        const classes = {\n                            'Alto': 'bg-success',\n                            'M√©dio': 'bg-warning',\n                            'Baixo': 'bg-danger'\n                        };\n                        \n                        const badgeClass = classes[interest] || 'bg-secondary';\n                        return '<span class=\"badge ' + badgeClass + ' interest-badge\">' + interest + '</span>';\n                    }\n                    \n                    // Aplicar filtros\n                    function applyFilters() {\n                        const filters = {\n                            stage: document.getElementById('filter-stage').value,\n                            interest: document.getElementById('filter-interest').value,\n                            period: document.getElementById('filter-period').value,\n                            source: document.getElementById('filter-source').value\n                        };\n                        \n                        // Remover filtros 'all'\n                        Object.keys(filters).forEach(key => {\n                            if (filters[key] === 'all') {\n                                delete filters[key];\n                            }\n                        });\n                        \n                        loadLeads(filters);\n                    }\n                    \n                    // Limpar filtros\n                    function clearFilters() {\n                        document.getElementById('filter-stage').value = 'all';\n                        document.getElementById('filter-interest').value = 'all';\n                        document.getElementById('filter-period').value = 'all';\n                        document.getElementById('filter-source').value = 'all';\n                        loadLeads();\n                    }\n                    \n                    // Inicializa√ß√£o\n                    document.addEventListener('DOMContentLoaded', function() {\n                        updateTime();\n                        setInterval(updateTime, 1000);\n                        loadStats();\n                        loadLeads();\n                        \n                        // Auto-refresh a cada 30 segundos\n                        setInterval(() => {\n                            loadStats();\n                            applyFilters();\n                        }, 30000);\n                    });\n                </script>\n            </body>\n            </html>\n        `);\n    } catch (error) {\n        console.error('Error loading dashboard:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\n// Rota para detalhes do lead (mantida)\nrouter.get('/lead/:whatsapp', async (req, res) => {\n    try {\n        const whatsappNumber = req.params.whatsapp;\n        const lead = await getLead(whatsappNumber);\n        const messages = await getMessages(whatsappNumber);\n\n        if (!lead) {\n            return res.status(404).send('Lead n√£o encontrado');\n        }\n\n        res.send(`\n            <!DOCTYPE html>\n            <html lang=\"pt-BR\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Detalhes do Lead - ${lead.name || lead.whatsapp_number}</title>\n                <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n                <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\n                <style>\n                    body {\n                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                        min-height: 100vh;\n                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    }\n                    \n                    .container {\n                        background: rgba(255, 255, 255, 0.95);\n                        border-radius: 20px;\n                        box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n                        backdrop-filter: blur(10px);\n                        margin: 20px auto;\n                        padding: 30px;\n                    }\n                    \n                    .chat-history {\n                        background: #f8f9fa;\n                        border-radius: 15px;\n                        padding: 20px;\n                        max-height: 600px;\n                        overflow-y: auto;\n                    }\n                    \n                    .message {\n                        margin-bottom: 15px;\n                        padding: 15px;\n                        border-radius: 15px;\n                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n                    }\n                    \n                    .user {\n                        background: linear-gradient(135deg, #e3f2fd, #bbdefb);\n                        margin-left: 20px;\n                    }\n                    \n                    .agent {\n                        background: linear-gradient(135deg, #f3e5f5, #e1bee7);\n                        margin-right: 20px;\n                    }\n                    \n                    .timestamp {\n                        font-size: 0.8rem;\n                        color: #6c757d;\n                        margin-top: 8px;\n                    }\n                    \n                    .lead-info {\n                        background: white;\n                        border-radius: 15px;\n                        padding: 25px;\n                        margin-bottom: 30px;\n                        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"container mt-4\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                        <h1 class=\"display-5 fw-bold text-primary\">\n                            <a href=\"/dashboard\" class=\"text-decoration-none\">\n                                <i class=\"fas fa-arrow-left me-3\"></i>\n                            </a>\n                            Detalhes do Lead\n                        </h1>\n                    </div>\n                    \n                    <div class=\"lead-info\">\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <h3 class=\"text-primary\">\n                                    <i class=\"fas fa-user me-2\"></i>\n                                    ${lead.name || 'Nome n√£o informado'}\n                                </h3>\n                                <p class=\"mb-2\">\n                                    <strong><i class=\"fab fa-whatsapp text-success me-2\"></i>WhatsApp:</strong>\n                                    <a href=\"https://wa.me/${lead.whatsapp_number}\" target=\"_blank\" class=\"text-decoration-none\">\n                                        ${lead.whatsapp_number}\n                                    </a>\n                                 </p>\n                                ${lead.cpf ? '<p class=\"mb-2\"><strong><i class=\"fas fa-id-card me-2\"></i>CPF:</strong> ' + lead.cpf + '</p>' : ''}\n                                ${lead.email ? '<p class=\"mb-2\"><strong><i class=\"fas fa-envelope me-2\"></i>Email:</strong> ' + lead.email + '</p>' : ''}\n                            </div>\n                            <div class=\"col-md-6\">\n                                <p class=\"mb-2\">\n                                    <strong><i class=\"fas fa-chart-line me-2\"></i>Est√°gio:</strong>\n                                    <span class=\"badge bg-primary\">${lead.stage}</span>\n                                </p>\n                                <p class=\"mb-2\">\n                                    <strong><i class=\"fas fa-heart me-2\"></i>Interesse:</strong>\n                                    <span class=\"badge bg-success\">${lead.interest_level || 'N/A'}</span>\n                                </p>\n                                <p class=\"mb-2\">\n                                    <strong><i class=\"fas fa-source me-2\"></i>Fonte:</strong>\n                                    <span class=\"badge bg-secondary\">${lead.source || 'Org√¢nico'}</span>\n                                </p>\n                                ${lead.summary ? '<p class=\"mb-2\"><strong><i class=\"fas fa-notes-medical me-2\"></i>Resumo:</strong> ' + lead.summary + '</p>' : ''}\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <h4 class=\"mb-3\">\n                        <i class=\"fas fa-comments me-2\"></i>Hist√≥rico da Conversa\n                        <span class=\"badge bg-primary ms-2\">${messages.length} mensagens</span>\n                    </h4>\n                    \n                    <div class=\"chat-history\">\n                        ${messages.length > 0 ? messages.map(msg => `\n                            <div class=\"message ${msg.sender}\">\n                                <div class=\"d-flex justify-content-between align-items-start\">\n                                    <strong class=\"text-primary\">\n                                        <i class=\"fas ${msg.sender === 'user' ? 'fa-user' : 'fa-robot'} me-2\"></i>\n                                        ${msg.sender === 'user' ? 'Cliente' : 'Agente IA'}\n                                    </strong>\n                                    <small class=\"text-muted\">${new Date(msg.timestamp).toLocaleString('pt-BR')}</small>\n                                </div>\n                                <div class=\"mt-2\">${msg.message}</div>\n                            </div>\n                        `).join('') : '<div class=\"text-center text-muted py-4\"><i class=\"fas fa-comment-slash me-2\"></i>Nenhuma mensagem encontrada</div>'}\n                    </div>\n                </div>\n                \n                <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n            </body>\n            </html>\n        `);\n    } catch (error) {\n        console.error('Error loading lead details:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\n// Rota para salvar prompt (mantida)\nrouter.post('/prompt', async (req, res) => {\n    try {\n        const newPrompt = req.body.prompt;\n        await fs.writeFile('./prompt.js', newPrompt, 'utf-8');\n        res.redirect('/dashboard');\n    } catch (error) {\n        console.error('Error updating prompt:', error);\n        res.status(500).send('Internal Server Error');\n    }\n});\n\nmodule.exports = router;",
    "database.js": "const sqlite3 = require('sqlite3').verbose();\nconst db = new sqlite3.Database('./crm.db');\n\nconst initializeDb = () => {\n    db.serialize(() => {\n        db.run(`CREATE TABLE IF NOT EXISTS crm (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            whatsapp_number TEXT UNIQUE,\n            name TEXT,\n            cpf TEXT,\n            email TEXT,\n            address TEXT,\n            stage INTEGER DEFAULT 0,\n            last_interaction_timestamp TEXT,\n            protocol TEXT,\n            source TEXT,\n            summary TEXT,\n            interest_level TEXT,\n            fatura_nome_titular TEXT,\n            fatura_cpf_cnpj_titular TEXT\n        )`);\n\n        db.run(`CREATE TABLE IF NOT EXISTS messages (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            lead_whatsapp TEXT,\n            sender TEXT, -- 'user' or 'agent'\n            message TEXT,\n            timestamp TEXT,\n            FOREIGN KEY (lead_whatsapp) REFERENCES crm (whatsapp_number)\n        )`);\n    });\n};\n\nconst getLead = (whatsappNumber) => {\n    return new Promise((resolve, reject) => {\n        db.get('SELECT * FROM crm WHERE whatsapp_number = ?', [whatsappNumber], (err, row) => {\n            if (err) return reject(err);\n            resolve(row);\n        });\n    });\n};\n\nconst getAllLeads = () => {\n    return new Promise((resolve, reject) => {\n        db.all('SELECT * FROM crm ORDER BY last_interaction_timestamp DESC', (err, rows) => {\n            if (err) return reject(err);\n            resolve(rows);\n        });\n    });\n};\n\nconst addLead = (leadData) => {\n    return new Promise((resolve, reject) => {\n        const columns = Object.keys(leadData).join(', ');\n        const placeholders = Object.keys(leadData).map(() => '?').join(', ');\n        const values = Object.values(leadData);\n\n        const sql = `INSERT INTO crm (${columns}) VALUES (${placeholders})`;\n        db.run(sql, values, function(err) {\n            if (err) return reject(err);\n            resolve(this.lastID);\n        });\n    });\n};\n\nconst updateLead = (whatsappNumber, leadData) => {\n    return new Promise((resolve, reject) => {\n        const updates = Object.keys(leadData).map(col => `${col} = ?`).join(', ');\n        const values = [...Object.values(leadData), whatsappNumber];\n\n        const sql = `UPDATE crm SET ${updates} WHERE whatsapp_number = ?`;\n        db.run(sql, values, function(err) {\n            if (err) return reject(err);\n            resolve(this.changes);\n        });\n    });\n};\n\nconst addMessage = (leadWhatsapp, sender, message) => {\n    return new Promise((resolve, reject) => {\n        const timestamp = new Date().toISOString();\n        const sql = `INSERT INTO messages (lead_whatsapp, sender, message, timestamp) VALUES (?, ?, ?, ?)`;\n        db.run(sql, [leadWhatsapp, sender, message, timestamp], function(err) {\n            if (err) return reject(err);\n            resolve(this.lastID);\n        });\n    });\n};\n\nconst getMessages = (leadWhatsapp) => {\n    return new Promise((resolve, reject) => {\n        db.all('SELECT * FROM messages WHERE lead_whatsapp = ? ORDER BY timestamp ASC', [leadWhatsapp], (err, rows) => {\n            if (err) return reject(err);\n            resolve(rows);\n        });\n    });\n};\n\nmodule.exports = {\n    initializeDb,\n    getLead,\n    getAllLeads,\n    addLead,\n    updateLead,\n    addMessage,\n    getMessages\n};",
    "dossier.js": "// dossier.js - Base de Conhecimento da Energia A\n\nconst conhecimentoEnergia = {\n    // PERGUNTAS SOBRE O PRODUTO\n    'como funciona': `A Energia por Assinatura funciona assim: voc√™ assina um plano mensal e recebe cr√©ditos de energia de nossas fazendas solares. Esses cr√©ditos s√£o aplicados automaticamente na sua conta da Energisa, reduzindo sua fatura em at√© 20%.`,\n    \n    'energia por assinatura': `√â um servi√ßo onde voc√™ n√£o precisa instalar nada na sua casa. Voc√™ assina um plano e recebe cr√©ditos de energia limpa de nossas fazendas solares em MS. Os cr√©ditos s√£o aplicados direto na sua conta da Energisa.`,\n    \n    'sem obras': `Exato! N√£o h√° obras, instala√ß√£o ou modifica√ß√£o na sua casa. Tudo √© feito administrativamente. Voc√™ apenas assina o plano e os cr√©ditos aparecem na sua fatura da Energisa.`,\n    \n    // PERGUNTAS FINANCEIRAS\n    'quanto custa': `O valor do plano √© calculado com base no seu consumo atual. Voc√™ paga menos do que pagaria na Energisa e ainda economiza at√© 20% na conta de luz. √â um investimento que se paga sozinho.`,\n    \n    'economia': `Com nosso Plano Otimizado 20%, voc√™ economiza at√© 20% na sua conta de luz. Isso porque conseguimos abater os cr√©ditos sobre toda a base de c√°lculo, incluindo impostos.`,\n    \n    'desconto': `Oferecemos at√© 20% de economia na sua conta de luz atrav√©s do nosso Plano Otimizado. √â uma economia real e garantida todos os meses.`,\n    \n    // PERGUNTAS T√âCNICAS\n    'titularidade': `A transfer√™ncia de titularidade √© um processo 100% regulamentado pela ANEEL. √â tempor√°rio e administrativo, permitindo que apliquemos os cr√©ditos sobre toda a base de c√°lculo da sua fatura, maximizando sua economia.`,\n    \n    'aneel': `Sim, somos 100% regulamentados pela ANEEL. A energia por assinatura √© uma modalidade oficial de compensa√ß√£o de energia el√©trica, prevista na Resolu√ß√£o Normativa 482/2012 da ANEEL.`,\n    \n    'seguro': `Totalmente seguro! Somos regulamentados pela ANEEL, temos todas as licen√ßas necess√°rias e milhares de clientes satisfeitos em MS. Voc√™ pode verificar nossa situa√ß√£o no site da ANEEL.`,\n    \n    // PERGUNTAS SOBRE INSTALA√á√ÉO\n    'placas solares': `Oferecemos dois servi√ßos: Energia por Assinatura (sem instala√ß√£o) e Instala√ß√£o de Placas Solares. Para instala√ß√£o, nossa equipe de engenharia faz uma an√°lise t√©cnica completa da sua propriedade.`,\n    \n    'instalar': `Se voc√™ quer instalar placas na sua casa, temos esse servi√ßo tamb√©m! Nossa equipe de engenharia analisa sua propriedade e elabora um projeto personalizado. Quer que eu encaminhe para an√°lise?`,\n    \n    // PERGUNTAS SOBRE PROCESSO\n    'contrato': `O contrato √© simples e transparente. Enviamos por e-mail para assinatura digital. N√£o h√° pegadinhas, taxas ocultas ou surpresas. Tudo muito claro e direto.`,\n    \n    'cancelar': `Voc√™ pode cancelar a qualquer momento com 30 dias de anteced√™ncia. N√£o h√° multa ou taxa de cancelamento. Somos transparentes em tudo.`,\n    \n    'prazo': `Ap√≥s a assinatura do contrato, o processo leva de 30 a 60 dias para come√ßar a aparecer os cr√©ditos na sua fatura. Isso depende dos tr√¢mites com a Energisa.`,\n    \n    // PERGUNTAS SOBRE A EMPRESA\n    'empresa': `A Energia A √© uma empresa especializada em solu√ß√µes de energia limpa em Mato Grosso do Sul. Temos fazendas solares pr√≥prias e milhares de clientes satisfeitos.`,\n    \n    'campo grande': `Sim, somos de Campo Grande - MS! Conhecemos bem o mercado local, o clima da regi√£o e as particularidades da Energisa aqui no estado.`,\n    \n    // OBJE√á√ïES COMUNS\n    'muito bom': `Entendo que pare√ßa bom demais para ser verdade! Mas √© real e regulamentado. Temos milhares de clientes economizando todo m√™s. Posso mostrar cases reais se quiser.`,\n    \n    'golpe': `Entendo sua preocupa√ß√£o! Somos uma empresa s√©ria, regulamentada pela ANEEL. Voc√™ pode verificar nossa situa√ß√£o no site da ANEEL e conversar com nossos clientes. Transpar√™ncia total!`,\n    \n    'confian√ßa': `Sua desconfian√ßa √© normal e saud√°vel! Somos regulamentados pela ANEEL, temos CNPJ ativo, endere√ßo f√≠sico em Campo Grande e milhares de clientes. Que tal marcarmos um caf√© para voc√™ conhecer melhor?`\n};\n\n// Fun√ß√£o para buscar conhecimento\nfunction buscarConhecimento(pergunta) {\n    const perguntaLower = pergunta.toLowerCase();\n    \n    // Buscar por palavras-chave\n    for (const [chave, resposta] of Object.entries(conhecimentoEnergia)) {\n        if (perguntaLower.includes(chave)) {\n            return {\n                encontrado: true,\n                conteudo: resposta,\n                chave: chave\n            };\n        }\n    }\n    \n    // Buscar por sin√¥nimos e varia√ß√µes\n    const sinonimos = {\n        'pre√ßo': 'quanto custa',\n        'valor': 'quanto custa',\n        'custo': 'quanto custa',\n        'funciona': 'como funciona',\n        'confi√°vel': 'seguro',\n        'verdade': 'seguro',\n        'real': 'seguro',\n        'fraude': 'golpe',\n        'engana√ß√£o': 'golpe',\n        'placas': 'placas solares',\n        'painel': 'placas solares',\n        'solar': 'placas solares'\n    };\n    \n    for (const [sinonimo, chaveOriginal] of Object.entries(sinonimos)) {\n        if (perguntaLower.includes(sinonimo) && conhecimentoEnergia[chaveOriginal]) {\n            return {\n                encontrado: true,\n                conteudo: conhecimentoEnergia[chaveOriginal],\n                chave: chaveOriginal\n            };\n        }\n    }\n    \n    return {\n        encontrado: false,\n        conteudo: null,\n        chave: null\n    };\n}\n\nmodule.exports = { buscarConhecimento, conhecimentoEnergia };",
    "prompt.js": "// prompt.js\n\n// Cole aqui o seu prompt principal. Este ser√° o prompt usado pela IA em todas as conversas.\nconst systemPrompt = `\n### DIRETRIZ MESTRA E PERSONA ###\nSua √∫nica fun√ß√£o √© atuar como um backend de processamento de linguagem, e sua √öNICA SA√çDA deve ser um objeto JSON v√°lido. Voc√™ assume a persona de Gabriel Luz, **um especialista em solu√ß√µes de energia** da Energia A. Sua miss√£o √© conversar com as pessoas, entender o que elas precisam e ver se a Energia A pode ajudar. Voc√™ √© de Campo Grande - MS, fala a l√≠ngua do povo, entende do calor√£o e sabe como a conta de luz pesa no bolso. Voc√™ n√£o √© um vendedor apressado, √© um consultor que ajuda com calma. Pense em cada mensagem. Respire. Sua comunica√ß√£o √© mais humana, menos rob√≥tica.\n\n### CONHECIMENTO PROFUNDO: O ECOSSISTEMA ENERGIA A ###\n- **Nosso Prop√≥sito Central:** Simplificar o acesso √† energia limpa e mais barata. O cliente n√£o precisa de obras, investimento ou conhecimento t√©cnico. N√≥s cuidamos de tudo.\n- **Nosso Produto (Energia por Assinatura):** O cliente assina um plano e recebe cr√©ditos de energia de nossas fazendas solares no MS. Esses cr√©ditos s√£o aplicados diretamente na sua conta da Energisa, resultando em economia l√≠quida.\n- **O Diferencial Competitivo (Plano Otimizado 20%):** Nosso plano principal. Atrav√©s da transfer√™ncia tempor√°ria e administrativa da titularidade da conta (processo 100% regulamentado pela ANEEL), n√≥s, como empresa, conseguimos abater os cr√©ditos sobre a base de c√°lculo COMPLETA da fatura, incluindo impostos (ICMS). √â assim que alcan√ßamos a economia m√°xima.\n- **Plano Flex√≠vel (15% - Recurso Estrat√©gico):** Uma ferramenta para contornar a obje√ß√£o da titularidade. Ofere√ßa APENAS se um cliente de alto potencial apresentar resist√™ncia intranspon√≠vel √† transfer√™ncia.\n- **Servi√ßo de Engenharia (Instala√ß√£o de Placas):** Se o cliente perguntar sobre \"instalar placas\", valide o interesse, colete a fatura e o e-mail para an√°lise da equipe de engenharia e mude o \\`next_stage\\` para 99.\n\n### C√ìDIGO DE CONDUTA (AS LEIS DA CONSULTORIA DE ELITE) ###\n1.  **LEI DA ESTRUTURA E CLAREZA (CR√çTICA):** Sua sa√≠da √© SEMPRE um objeto JSON v√°lido. Use o campo \\`response_message\\` (singular) para a sua resposta completa. Se n√£o houver nada a dizer, retorne \\`null\\` neste campo, mas NUNCA o omita.\n2.  **LEI DO RITMO HUMANO (ESSENCIAL):** Para uma conversa que soe real, voc√™ DEVE:\n    a) Separar cada bal√£o de mensagem com o delimitador \\`|||\\`.\n    b) Manter cada segmento de mensagem curto e direto (1-2 frases no m√°ximo).\n    c) **Introduzir pausas realistas.** Use \\`delay:ms\\` (ex: \\`delay:1500\\`) entre os \\`|||\\` para simular o tempo de digita√ß√£o e reflex√£o. Varie os tempos de pausa para n√£o parecer mec√¢nico (ex: \\`delay:800\\`, \\`delay:2000\\`).\n    d) **Exemplo de fluxo:** \\`Oi, tudo bem?|||delay:1200|||Aqui √© o Gabriel, da Energia A.|||delay:1500|||Recebi seu contato, como posso te ajudar hoje?\\`\n3.  **LEI DA PROVA ANTES DA PERGUNTA:** Ao analisar uma fatura, voc√™ DEVE primeiro informar ao cliente o que voc√™ conseguiu extrair. Exemplo de Tom: \"Ok, Jo√£o, analisei aqui. Vi que seu endere√ßo √© na Afonso Pena e o consumo √© X. Para finalizar, s√≥ preciso do seu CPF...\". Isso demonstra compet√™ncia.\n4.  **LEI DA ESCUTA ATIVA E INTEN√á√ÉO:** Se um cliente perguntar diretamente sobre \"desconto\", \"pre√ßo\" ou \"quanto custa\", reconhe√ßa isso como um forte sinal de interesse. Valide a pergunta (\"√ìtima pergunta, vamos direto ao ponto ent√£o.\") e avance imediatamente para o **PASSO 3 (Coleta de Dados)**, pulando a fase de explora√ß√£o.\n5.  **LEI DA JAULA DE DADOS (ANTI-ALUCINA√á√ÉO):** Voc√™ est√° PROIBIDO de mencionar valores financeiros. A an√°lise num√©rica √© responsabilidade exclusiva do nosso sistema de propostas.\n\n### OBJETIVOS POR EST√ÅGIO (SEU GUIA DE NAVEGA√á√ÉO) ###\n\n**REGRA DE SEGURAN√áA (FALLBACK):** Se o \\`Est√°gio\\` fornecido na instru√ß√£o interna for \\`0\\` ou qualquer outro n√∫mero n√£o listado abaixo, voc√™ DEVE agir como se estivesse no \\`Est√°gio 1\\`. Inicie a conversa de forma proativa e defina o \\`next_stage\\` como \\`2\\`.\n\n**Est√°gio 1 (Abertura Contextual):**\n- **Objetivo:** Apresentar-se calorosamente, criar uma conex√£o local e passar a palavra ao cliente.\n- **Exemplo de Tom (Mais Humano):** \"Opa, tudo joia?|||delay:1000|||Meu nome √© Gabriel Luz, sou especialista aqui da Energia A.|||delay:1200|||Vi que voc√™ deixou seu contato com a gente. Como √© que eu posso te ajudar hoje?\"\n- **(Adapte o tom para outras fontes como Campanha, An√∫ncio, Indica√ß√£o)**\n\n**Est√°gio 2 (Explora√ß√£o):**\n- **Gatilho:** Cliente respondeu de forma aberta.\n- **Objetivo:** Entender a dor antes de oferecer a solu√ß√£o.\n- **Exemplo de Tom:** \"Entendido. E com esse calor que faz na nossa cidade, imagino que o ar condicionado n√£o d√™ tr√©gua, certo? Muitas pessoas nos procuram por causa disso. √â o seu caso tamb√©m, ou sua preocupa√ß√£o √© outra?\"\n\n**Est√°gio 3 (Diagn√≥stico R√°pido):**\n- **Gatilho:** Cliente confirmou interesse em economizar.\n- **A√ß√£o:** Pe√ßa a fatura OU valor da conta.\n- **Exemplo de Tom:** \"Perfeito! Para calcular sua economia, posso analisar sua fatura de energia.|||delay:1500|||Consegue me enviar uma foto da √∫ltima conta?|||delay:1000|||Ou se preferir, pode me falar quanto voc√™ paga por m√™s que j√° consigo te dar uma estimativa.\"\n\n**Est√°gio 4 (Apresenta√ß√£o da Economia):**\n- **Contexto:** Sistema calculou a proposta.\n- **Objetivo:** Mostrar o valor da economia e despertar interesse.\n- **Exemplo de Tom:** \"Pronto, {nome}! Analisando sua conta...|||delay:2000|||Com nosso sistema de energia por assinatura, voc√™ economizaria aproximadamente R$ {proposalData.economiaMensal} por m√™s.|||delay:1500|||Isso d√° R$ {proposalData.economiaAnual} por ano no seu bolso!|||delay:1000|||O que voc√™ acha desse valor?\"\n\n**Est√°gios 4-6 (Coleta Manual - Plano B):**\n- **Gatilho:** Cliente n√£o enviou a fatura.\n- **Objetivo:** Coletar os dados m√≠nimos para o c√°lculo: Nome, Consumo, Taxa, Tipo de Conex√£o.\n- **Exemplo de Tom:** \"Sem problemas, podemos prosseguir com alguns dados. Para come√ßar, qual o seu nome completo?\"\n\n**Est√°gio 7 (Coleta de Lacunas P√≥s-Fatura):**\n- **Contexto:** O sistema processou a fatura e te forneceu os dados em \\`knownData\\`.\n- **Objetivo:** Usar a \"LEI DA PROVA ANTES DA PERGUNTA\" para coletar os dados faltantes.\n- **Exemplo de Tom:** \"Ok, {knownData.name}, an√°lise da fatura conclu√≠da. O sistema j√° identificou seu consumo de {knownData.consumo_medio} kWh. Para podermos gerar a proposta, s√≥ preciso de um dado que n√£o consta na fatura: seu CPF, por favor.\"\n\n**Est√°gio 8 (Gera√ß√£o da Proposta):**\n- **Gatilho:** Todos os dados necess√°rios foram coletados (nome, CPF, endere√ßo completo, consumo, tipo de conex√£o).\n- **A√ß√£o:** Ap√≥s coletar todos os dados, voc√™ deve avan√ßar para este est√°gio para que o sistema gere a proposta. Apenas confirme que os dados est√£o corretos e pe√ßa para o cliente aguardar um momento.\n- **Exemplo de Tom:** \"Show, {nome}! Com isso aqui j√° consigo avan√ßar.|||delay:1500|||Vou jogar seus dados no nosso sistema de an√°lise agora.|||delay:2000|||Ele vai criar uma proposta bem visual pra voc√™ entender a economia.|||delay:1200|||Assim que cuspir o resultado, eu j√° te mando a imagem por aqui, beleza?\"\n\n**Est√°gio 9 (P√≥s-Proposta):**\n- **Contexto:** A imagem da proposta foi entregue.\n- **Objetivo:** Reengajar o cliente e gui√°-lo para o fechamento.\n- **Exemplo de Tom:** \"Prontinho, {nome}! Essa √© a sua proje√ß√£o de economia.|||O que voc√™ achou do valor que conseguimos reverter para o seu or√ßamento?\"\n\n**Est√°gio 10 (Fechamento):**\n- **Gatilho:** Cliente demonstrou interesse em fechar.\n- **Objetivo:** Confirmar a decis√£o e explicar os pr√≥ximos passos.\n- **Exemplo de Tom:** \"√ìtima decis√£o! Fico feliz que tenha visto o valor. O pr√≥ximo passo √© simples: vamos preparar o contrato de ades√£o e enviar para o seu e-mail para assinatura digital. Podemos prosseguir?\"\n\n### FORMATO DE SA√çDA JSON (OBRIGAT√ìRIO E √öNICO) ###\nO resultado final DEVE ser um objeto JSON com a seguinte estrutura:\n{\n  \"response_message\": \"Uma √öNICA string de texto, usando '|||' como separador para simular m√∫ltiplos bal√µes. Pode ser null se n√£o houver resposta.\",\n  \"next_stage\": 0,\n  \"name\": null,\n  \"cpf\": null,\n  \"email\": null,\n  \"address_logradouro\": null,\n  \"address_numero\": null,\n  \"address_bairro\": null,\n  \"address_cidade\": null,\n  \"address_uf\": null,\n  \"consumo_medio\": null,\n  \"taxa_iluminacao\": null,\n  \"tipo_conexao\": null,\n  \"summary\": \"\",\n  \"interest_level\": \"\",\n  \"tags\": []\n}`;\n\nmodule.exports = { systemPrompt };",
    "propostaGenerator.js": "const axios = require('axios');\nconst { updateLead } = require('./database');\n\n/**\n * Valida se um CPF √© v√°lido\n * @param {string} cpf - CPF a ser validado\n * @returns {boolean} - True se v√°lido, false caso contr√°rio\n */\nfunction validarCPF(cpf) {\n    if (!cpf) return false;\n    \n    // Remove caracteres n√£o num√©ricos\n    cpf = cpf.replace(/[^\\d]/g, '');\n    \n    // Verifica se tem 11 d√≠gitos\n    if (cpf.length !== 11) return false;\n    \n    // Verifica se todos os d√≠gitos s√£o iguais\n    if (/^(\\d)\\1{10}$/.test(cpf)) return false;\n    \n    // Valida√ß√£o do primeiro d√≠gito verificador\n    let soma = 0;\n    for (let i = 0; i < 9; i++) {\n        soma += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    let resto = 11 - (soma % 11);\n    if (resto === 10 || resto === 11) resto = 0;\n    if (resto !== parseInt(cpf.charAt(9))) return false;\n    \n    // Valida√ß√£o do segundo d√≠gito verificador\n    soma = 0;\n    for (let i = 0; i < 10; i++) {\n        soma += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    resto = 11 - (soma % 11);\n    if (resto === 10 || resto === 11) resto = 0;\n    if (resto !== parseInt(cpf.charAt(10))) return false;\n    \n    return true;\n}\n\n/**\n * Formata dados para o payload da API\n * @param {Object} dados - Dados do lead\n * @returns {Object} - Payload formatado\n */\nfunction formatarPayload(dados) {\n    return {\n        nome: dados.nome?.trim() || '',\n        cpf: dados.cpf?.replace(/[^\\d]/g, '') || '',\n        whatsapp: dados.whatsapp?.replace(/[^\\d]/g, '') || '',\n        sessionId: dados.sessionId || Date.now().toString(),\n        endereco: {\n            logradouro: dados.endereco?.logradouro?.trim() || '',\n            numero: dados.endereco?.numero?.toString().trim() || '',\n            bairro: dados.endereco?.bairro?.trim() || '',\n            cidade: dados.endereco?.cidade?.trim() || '',\n            uf: dados.endereco?.uf?.trim().toUpperCase() || ''\n        },\n        consumo_medio: parseFloat(dados.consumo_medio) || 0,\n        taxa_iluminacao: parseFloat(dados.taxa_iluminacao) || 0,\n        tipo_conexao: dados.tipo_conexao?.toUpperCase() || 'MONOFASICO'\n    };\n}\n\n/**\n * Valida os dados obrigat√≥rios\n * @param {Object} dados - Dados a serem validados\n * @returns {Object} - Resultado da valida√ß√£o\n */\nfunction validarDados(dados) {\n    const erros = [];\n    \n    // Valida√ß√µes obrigat√≥rias\n    if (!dados.nome || dados.nome.trim().length < 2) {\n        erros.push('Nome deve ter pelo menos 2 caracteres');\n    }\n    \n    if (!validarCPF(dados.cpf)) {\n        erros.push('CPF inv√°lido');\n    }\n    \n    if (!dados.whatsapp || dados.whatsapp.replace(/[^\\d]/g, '').length < 10) {\n        erros.push('WhatsApp deve ter pelo menos 10 d√≠gitos');\n    }\n    \n    if (!dados.endereco?.logradouro || dados.endereco.logradouro.trim().length < 3) {\n        erros.push('Logradouro deve ter pelo menos 3 caracteres');\n    }\n    \n    if (!dados.endereco?.cidade || dados.endereco.cidade.trim().length < 2) {\n        erros.push('Cidade deve ter pelo menos 2 caracteres');\n    }\n    \n    if (!dados.endereco?.uf || dados.endereco.uf.trim().length !== 2) {\n        erros.push('UF deve ter exatamente 2 caracteres');\n    }\n    \n    if (!dados.consumo_medio || dados.consumo_medio <= 0) {\n        erros.push('Consumo m√©dio deve ser maior que zero');\n    }\n    \n    if (dados.taxa_iluminacao === undefined || dados.taxa_iluminacao < 0) {\n        erros.push('Taxa de ilumina√ß√£o deve ser informada (pode ser 0)');\n    }\n    \n    const tiposValidos = ['MONOFASICO', 'BIFASICO', 'TRIFASICO'];\n    if (!tiposValidos.includes(dados.tipo_conexao?.toUpperCase())) {\n        erros.push('Tipo de conex√£o deve ser MONOFASICO, BIFASICO ou TRIFASICO');\n    }\n    \n    return {\n        valido: erros.length === 0,\n        erros\n    };\n}\n\n/**\n * Gera proposta de energia solar via API GEUS\n * @param {Object} dadosLead - Dados do lead para gera√ß√£o da proposta\n * @returns {Promise<Object>} - Resultado da opera√ß√£o\n */\nasync function gerarPropostaEnergiaSolar(dadosLead) {\n    const logPrefix = `[PROPOSTA-${dadosLead.whatsapp}]`;\n    \n    try {\n        console.log(`${logPrefix} Iniciando gera√ß√£o de proposta...`);\n        console.log(`${logPrefix} Dados recebidos:`, JSON.stringify(dadosLead, null, 2));\n        \n        // Formatar dados\n        const payload = formatarPayload(dadosLead);\n        console.log(`${logPrefix} Payload formatado:`, JSON.stringify(payload, null, 2));\n        \n        // Validar dados\n        const validacao = validarDados(payload);\n        if (!validacao.valido) {\n            console.error(`${logPrefix} Dados inv√°lidos:`, validacao.erros);\n            return {\n                sucesso: false,\n                mensagem: `Dados inv√°lidos: ${validacao.erros.join(', ')}`,\n                erros: validacao.erros\n            };\n        }\n        \n        console.log(`${logPrefix} Dados validados com sucesso`);\n        \n        // Configurar requisi√ß√£o para API GEUS\n        const config = {\n            method: 'POST',\n            url: 'https://geus.energiaa.com.br/api/propostaAgente/receber-proposta/',\n            headers: {\n                'Content-Type': 'application/json',\n                'User-Agent': 'SalesAgent/1.0'\n            },\n            data: payload,\n            timeout: 30000 // 30 segundos\n        };\n        \n        console.log(`${logPrefix} Enviando requisi√ß√£o para API GEUS...`);\n        console.log(`${logPrefix} URL: ${config.url}`);\n        \n        // Fazer requisi√ß√£o\n        const response = await axios(config);\n        \n        console.log(`${logPrefix} Resposta da API GEUS:`);\n        console.log(`${logPrefix} Status: ${response.status}`);\n        console.log(`${logPrefix} Headers:`, response.headers);\n        console.log(`${logPrefix} Data:`, JSON.stringify(response.data, null, 2));\n        \n        // Verificar se a resposta indica sucesso\n        if (response.status >= 200 && response.status < 300) {\n            console.log(`${logPrefix} Proposta enviada com sucesso!`);\n            \n            // Atualizar lead no banco com informa√ß√µes da proposta\n            try {\n                await updateLead(dadosLead.whatsapp, {\n                    proposta_enviada: true,\n                    proposta_data: new Date().toISOString(),\n                    proposta_session_id: payload.sessionId,\n                    stage: 9 // Avan√ßa para est√°gio p√≥s-proposta\n                });\n                console.log(`${logPrefix} Lead atualizado no banco de dados`);\n            } catch (dbError) {\n                console.error(`${logPrefix} Erro ao atualizar lead no banco:`, dbError);\n                // N√£o falha a opera√ß√£o por erro de banco\n            }\n            \n            return {\n                sucesso: true,\n                mensagem: 'Proposta gerada e enviada com sucesso',\n                sessionId: payload.sessionId,\n                response: response.data\n            };\n        } else {\n            console.error(`${logPrefix} API retornou status n√£o-sucesso: ${response.status}`);\n            return {\n                sucesso: false,\n                mensagem: `Erro na API: Status ${response.status}`,\n                status: response.status,\n                response: response.data\n            };\n        }\n        \n    } catch (error) {\n        console.error(`${logPrefix} Erro ao gerar proposta:`, error);\n        \n        // Tratamento espec√≠fico para diferentes tipos de erro\n        if (error.code === 'ECONNABORTED') {\n            return {\n                sucesso: false,\n                mensagem: 'Timeout na conex√£o com o servidor de propostas',\n                erro: 'TIMEOUT'\n            };\n        }\n        \n        if (error.response) {\n            // Erro de resposta HTTP\n            console.error(`${logPrefix} Erro HTTP:`, {\n                status: error.response.status,\n                statusText: error.response.statusText,\n                data: error.response.data\n            });\n            \n            return {\n                sucesso: false,\n                mensagem: `Erro do servidor: ${error.response.status} - ${error.response.statusText}`,\n                status: error.response.status,\n                response: error.response.data\n            };\n        }\n        \n        if (error.request) {\n            // Erro de rede\n            console.error(`${logPrefix} Erro de rede:`, error.message);\n            return {\n                sucesso: false,\n                mensagem: 'Erro de conex√£o com o servidor de propostas',\n                erro: 'NETWORK_ERROR'\n            };\n        }\n        \n        // Erro gen√©rico\n        return {\n            sucesso: false,\n            mensagem: `Erro interno: ${error.message}`,\n            erro: error.message\n        };\n    }\n}\n\nmodule.exports = {\n    gerarPropostaEnergiaSolar,\n    validarCPF,\n    formatarPayload,\n    validarDados\n};",
    "report.js": "require('dotenv').config();\nconst { getAllLeads } = require('./database');\nconst { sendWhatsAppMessage } = require('./utils');\n\nclass ReportManager {\n    constructor() {\n        this.adminNumbers = process.env.ADMIN_WHATSAPP_NUMBERS?.split(',') || [];\n    }\n\n    async generateDailyReport() {\n        try {\n            console.log('üìä Gerando relat√≥rio di√°rio...');\n            \n            const leads = await getAllLeads();\n            const now = new Date();\n            const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n            \n            // Leads criados nas √∫ltimas 24h\n            const newLeads = leads.filter(lead => {\n                const createdAt = new Date(lead.created_at || lead.last_interaction_timestamp);\n                return createdAt >= yesterday;\n            });\n            \n            // Leads que interagiram nas √∫ltimas 24h\n            const activeLeads = leads.filter(lead => {\n                const lastInteraction = new Date(lead.last_interaction_timestamp);\n                return lastInteraction >= yesterday;\n            });\n            \n            // Estat√≠sticas por est√°gio\n            const stageStats = {};\n            leads.forEach(lead => {\n                const stage = `Est√°gio ${lead.stage}`;\n                stageStats[stage] = (stageStats[stage] || 0) + 1;\n            });\n            \n            // Estat√≠sticas por interesse\n            const interestStats = {};\n            leads.forEach(lead => {\n                const interest = lead.interest_level || 'N√£o definido';\n                interestStats[interest] = (interestStats[interest] || 0) + 1;\n            });\n            \n            // Leads qualificados (est√°gio 4+)\n            const qualifiedLeads = leads.filter(lead => lead.stage >= 4);\n            \n            // Taxa de convers√£o\n            const conversionRate = leads.length > 0 ? \n                ((qualifiedLeads.length / leads.length) * 100).toFixed(1) : 0;\n            \n            // Monta o relat√≥rio\n            const report = `üåü *RELAT√ìRIO DI√ÅRIO CRM*\\n${now.toLocaleDateString('pt-BR')}\\n\\n` +\n                `üìà *RESUMO GERAL*\\n` +\n                `‚Ä¢ Total de Leads: ${leads.length}\\n` +\n                `‚Ä¢ Novos Leads (24h): ${newLeads.length}\\n` +\n                `‚Ä¢ Leads Ativos (24h): ${activeLeads.length}\\n` +\n                `‚Ä¢ Taxa de Convers√£o: ${conversionRate}%\\n\\n` +\n                \n                `üéØ *POR EST√ÅGIO*\\n` +\n                Object.entries(stageStats)\n                    .map(([stage, count]) => `‚Ä¢ ${stage}: ${count}`)\n                    .join('\\n') + '\\n\\n' +\n                \n                `üí° *POR INTERESSE*\\n` +\n                Object.entries(interestStats)\n                    .map(([interest, count]) => `‚Ä¢ ${interest}: ${count}`)\n                    .join('\\n') + '\\n\\n' +\n                \n                `üèÜ *LEADS QUALIFICADOS*\\n` +\n                `‚Ä¢ Total: ${qualifiedLeads.length}\\n`;\n            \n            // Adiciona top 5 leads mais promissores\n            const topLeads = leads\n                .filter(lead => lead.interest_level === 'Alto' && lead.stage >= 2)\n                .slice(0, 5);\n                \n            if (topLeads.length > 0) {\n                const topLeadsText = topLeads\n                    .map((lead, index) => \n                        `${index + 1}. ${lead.name || 'N/A'} - Est√°gio ${lead.stage}`\n                    )\n                    .join('\\n');\n                    \n                report += `\\nüî• *TOP 5 LEADS PROMISSORES*\\n${topLeadsText}`;\n            }\n            \n            return report;\n            \n        } catch (error) {\n            console.error('‚ùå Erro ao gerar relat√≥rio:', error);\n            return `‚ùå Erro ao gerar relat√≥rio di√°rio: ${error.message}`;\n        }\n    }\n\n    async sendDailyReport() {\n        try {\n            console.log('üì§ Enviando relat√≥rio di√°rio...');\n            \n            const report = await this.generateDailyReport();\n            \n            if (this.adminNumbers.length === 0) {\n                console.log('‚ö†Ô∏è Nenhum n√∫mero de admin configurado');\n                console.log('Relat√≥rio gerado:');\n                console.log(report);\n                return;\n            }\n            \n            let successCount = 0;\n            let errorCount = 0;\n            \n            for (const adminNumber of this.adminNumbers) {\n                try {\n                    await sendWhatsAppMessage(adminNumber.trim(), report);\n                    successCount++;\n                    console.log(`‚úÖ Relat√≥rio enviado para ${adminNumber}`);\n                    \n                    // Delay entre envios\n                    await new Promise(resolve => setTimeout(resolve, 2000));\n                    \n                } catch (error) {\n                    console.error(`‚ùå Erro ao enviar para ${adminNumber}:`, error);\n                    errorCount++;\n                }\n            }\n            \n            console.log(`üìä Relat√≥rio enviado:`);\n            console.log(`   ‚úÖ Sucessos: ${successCount}`);\n            console.log(`   ‚ùå Erros: ${errorCount}`);\n            \n            return {\n                success: successCount,\n                errors: errorCount,\n                total: this.adminNumbers.length\n            };\n            \n        } catch (error) {\n            console.error('‚ùå Erro ao enviar relat√≥rio:', error);\n            throw error;\n        }\n    }\n\n    async generateWeeklyReport() {\n        try {\n            console.log('üìä Gerando relat√≥rio semanal...');\n            \n            const leads = await getAllLeads();\n            const now = new Date();\n            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            \n            // Leads da √∫ltima semana\n            const weekLeads = leads.filter(lead => {\n                const lastInteraction = new Date(lead.last_interaction_timestamp);\n                return lastInteraction >= weekAgo;\n            });\n            \n            // Progress√£o de est√°gios na semana\n            const stageProgression = {};\n            weekLeads.forEach(lead => {\n                const stage = lead.stage;\n                stageProgression[stage] = (stageProgression[stage] || 0) + 1;\n            });\n            \n            const report = `üìÖ *RELAT√ìRIO SEMANAL*\\n${now.toLocaleDateString('pt-BR')}\\n\\n` +\n                `üìà *RESUMO DA SEMANA*\\n` +\n                `‚Ä¢ Total de Leads: ${leads.length}\\n` +\n                `‚Ä¢ Leads Ativos (7 dias): ${weekLeads.length}\\n\\n` +\n                \n                `üéØ *DISTRIBUI√á√ÉO POR EST√ÅGIO*\\n` +\n                Object.entries(stageProgression)\n                    .sort(([a], [b]) => parseInt(a) - parseInt(b))\n                    .map(([stage, count]) => `‚Ä¢ Est√°gio ${stage}: ${count}`)\n                    .join('\\n');\n            \n            return report;\n            \n        } catch (error) {\n            console.error('‚ùå Erro ao gerar relat√≥rio semanal:', error);\n            return `‚ùå Erro ao gerar relat√≥rio semanal: ${error.message}`;\n        }\n    }\n}\n\n// Execu√ß√£o principal\nasync function main() {\n    try {\n        const reportManager = new ReportManager();\n        \n        // Verifica argumentos da linha de comando\n        const args = process.argv.slice(2);\n        const reportType = args[0] || 'daily';\n        \n        if (reportType === 'weekly') {\n            const report = await reportManager.generateWeeklyReport();\n            console.log('üìä Relat√≥rio semanal gerado:');\n            console.log(report);\n        } else {\n            await reportManager.sendDailyReport();\n        }\n        \n        console.log('üéâ Relat√≥rio executado com sucesso!');\n        process.exit(0);\n        \n    } catch (error) {\n        console.error('üí• Erro fatal no relat√≥rio:', error);\n        process.exit(1);\n    }\n}\n\n// Executa se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { ReportManager };",
    "campaign.js": "require('dotenv').config();\nconst { GoogleSpreadsheet } = require('google-spreadsheet');\nconst { JWT } = require('google-auth-library');\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\nconst { sendWhatsAppMessage } = require('./utils');\nconst { getAllLeads, updateLead } = require('./database');\n\n// Configura√ß√£o do Google Sheets\nconst serviceAccountAuth = new JWT({\n    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\n    key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n    scopes: ['https://www.googleapis.com/spreadsheets']\n});\n\n// Configura√ß√£o do Gemini\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n\nclass CampaignManager {\n    constructor() {\n        this.doc = null;\n        this.campaignSheet = null;\n    }\n\n    async initialize() {\n        try {\n            this.doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID, serviceAccountAuth);\n            await this.doc.loadInfo();\n            \n            // Procura ou cria a aba de campanhas\n            this.campaignSheet = this.doc.sheetsByTitle['Campanha_Disparos'];\n            if (!this.campaignSheet) {\n                this.campaignSheet = await this.doc.addSheet({\n                    title: 'Campanha_Disparos',\n                    headerValues: [\n                        'Data_Disparo', 'Whatsapp', 'Nome', 'Estagio', 'Interesse',\n                        'Mensagem_Enviada', 'Status', 'Resposta_Cliente', 'Observacoes'\n                    ]\n                });\n            }\n            \n            console.log('‚úÖ Campaign Manager inicializado com sucesso');\n        } catch (error) {\n            console.error('‚ùå Erro ao inicializar Campaign Manager:', error);\n            throw error;\n        }\n    }\n\n    async generatePersonalizedMessage(lead, campaignType = 'reativacao') {\n        try {\n            const prompt = `\n            Voc√™ √© um especialista em energia solar da empresa Energia A.\n            \n            DADOS DO LEAD:\n            - Nome: ${lead.name || 'Cliente'}\n            - Est√°gio atual: ${lead.stage}\n            - N√≠vel de interesse: ${lead.interest_level || 'N√£o definido'}\n            - √öltima intera√ß√£o: ${lead.last_interaction_timestamp}\n            \n            TIPO DE CAMPANHA: ${campaignType}\n            \n            Crie uma mensagem personalizada de WhatsApp para reativar este lead.\n            \n            DIRETRIZES:\n            - M√°ximo 160 caracteres\n            - Tom amig√°vel e profissional\n            - Mencione economia de energia\n            - Inclua uma pergunta para engajar\n            - Use o nome do cliente se dispon√≠vel\n            - N√£o use emojis excessivos\n            \n            Retorne APENAS a mensagem, sem explica√ß√µes.\n            `;\n\n            const result = await model.generateContent(prompt);\n            const message = result.response.text().trim();\n            \n            return message;\n        } catch (error) {\n            console.error('Erro ao gerar mensagem personalizada:', error);\n            return `Ol√° ${lead.name || 'cliente'}! Que tal economizar na conta de luz com energia solar? Posso te ajudar com uma proposta personalizada?`;\n        }\n    }\n\n    async runCampaign(campaignType = 'reativacao', targetStages = [1, 2, 3]) {\n        try {\n            console.log(`üöÄ Iniciando campanha: ${campaignType}`);\n            \n            // Busca leads eleg√≠veis\n            const allLeads = await getAllLeads();\n            const eligibleLeads = allLeads.filter(lead => {\n                // Filtra por est√°gio\n                if (!targetStages.includes(lead.stage)) return false;\n                \n                // Verifica √∫ltima intera√ß√£o (n√£o enviar para quem interagiu nas √∫ltimas 24h)\n                const lastInteraction = new Date(lead.last_interaction_timestamp);\n                const now = new Date();\n                const hoursSinceLastInteraction = (now - lastInteraction) / (1000 * 60 * 60);\n                \n                return hoursSinceLastInteraction > 24;\n            });\n\n            console.log(`üìä Leads eleg√≠veis encontrados: ${eligibleLeads.length}`);\n            \n            let successCount = 0;\n            let errorCount = 0;\n\n            for (const lead of eligibleLeads) {\n                try {\n                    // Gera mensagem personalizada\n                    const message = await this.generatePersonalizedMessage(lead, campaignType);\n                    \n                    // Envia mensagem\n                    await sendWhatsAppMessage(lead.whatsapp_number, message);\n                    \n                    // Registra no Google Sheets\n                    await this.campaignSheet.addRow({\n                        Data_Disparo: new Date().toISOString(),\n                        Whatsapp: lead.whatsapp_number,\n                        Nome: lead.name || 'N/A',\n                        Estagio: lead.stage,\n                        Interesse: lead.interest_level || 'N/A',\n                        Mensagem_Enviada: message,\n                        Status: 'Enviado',\n                        Resposta_Cliente: '',\n                        Observacoes: `Campanha: ${campaignType}`\n                    });\n                    \n                    // Atualiza lead no banco\n                    await updateLead(lead.whatsapp_number, {\n                        source: `Campanha_${campaignType}`,\n                        last_interaction_timestamp: new Date().toISOString()\n                    });\n                    \n                    successCount++;\n                    console.log(`‚úÖ Mensagem enviada para ${lead.name || lead.whatsapp_number}`);\n                    \n                    // Delay entre mensagens (2-5 segundos)\n                    await new Promise(resolve => setTimeout(resolve, Math.random() * 3000 + 2000));\n                    \n                } catch (error) {\n                    console.error(`‚ùå Erro ao enviar para ${lead.whatsapp_number}:`, error);\n                    errorCount++;\n                    \n                    // Registra erro no Google Sheets\n                    await this.campaignSheet.addRow({\n                        Data_Disparo: new Date().toISOString(),\n                        Whatsapp: lead.whatsapp_number,\n                        Nome: lead.name || 'N/A',\n                        Estagio: lead.stage,\n                        Interesse: lead.interest_level || 'N/A',\n                        Mensagem_Enviada: '',\n                        Status: 'Erro',\n                        Resposta_Cliente: '',\n                        Observacoes: `Erro: ${error.message}`\n                    });\n                }\n            }\n\n            console.log(`üìà Campanha finalizada:`);\n            console.log(`   ‚úÖ Sucessos: ${successCount}`);\n            console.log(`   ‚ùå Erros: ${errorCount}`);\n            console.log(`   üìä Total processado: ${eligibleLeads.length}`);\n            \n            return {\n                success: successCount,\n                errors: errorCount,\n                total: eligibleLeads.length\n            };\n            \n        } catch (error) {\n            console.error('‚ùå Erro na campanha:', error);\n            throw error;\n        }\n    }\n}\n\n// Execu√ß√£o principal\nasync function main() {\n    try {\n        const campaignManager = new CampaignManager();\n        await campaignManager.initialize();\n        \n        // Executa campanha de reativa√ß√£o para est√°gios 1, 2 e 3\n        await campaignManager.runCampaign('reativacao', [1, 2, 3]);\n        \n        console.log('üéâ Campanha executada com sucesso!');\n        process.exit(0);\n        \n    } catch (error) {\n        console.error('üí• Erro fatal na campanha:', error);\n        process.exit(1);\n    }\n}\n\n// Executa se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { CampaignManager };",
    "utils.js": "// utils.js\nrequire('dotenv').config();\nconst axios = require('axios');\n\nconst EVOLUTION_API_URL = process.env.EVOLUTION_API_URL;\nconst EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY;\nconst EVOLUTION_INSTANCE_NAME = process.env.EVOLUTION_INSTANCE_NAME;\n\nconst evolutionApi = axios.create({\n    baseURL: EVOLUTION_API_URL,\n    headers: { 'apikey': EVOLUTION_API_KEY }\n});\n\nasync function sendWhatsAppMessage(to, text) {\n    if (!to || typeof text !== 'string' || text.trim() === \"\") {\n        console.error(`Tentativa de enviar mensagem inv√°lida ou vazia. Para: ${to}.`);\n        return false;\n    }\n    \n    try {\n        await evolutionApi.post(`/message/sendText/${EVOLUTION_INSTANCE_NAME}`, {\n            number: to,\n            text: text\n        });\n        return true;\n    } catch (error) {\n        console.error(`Erro ao enviar mensagem para ${to}:`, error.response ? JSON.stringify(error.response.data) : error.message);\n        return false;\n    }\n}\n\nmodule.exports = { sendWhatsAppMessage, evolutionApi };",
    "test-evolution-api.js": "// test-evolution-api.js\nrequire('dotenv').config();\nconst { evolutionApi, checkInstanceStatus, sendWhatsAppMessage } = require('./utils');\n\nasync function testEvolutionApi() {\n    console.log('Iniciando teste da Evolution API...');\n    console.log('Verificando vari√°veis de ambiente:');\n    console.log(`EVOLUTION_API_URL: ${process.env.EVOLUTION_API_URL}`);\n    console.log(`EVOLUTION_INSTANCE_NAME: ${process.env.EVOLUTION_INSTANCE_NAME}`);\n    console.log(`EVOLUTION_API_KEY: ${process.env.EVOLUTION_API_KEY ? '***' + process.env.EVOLUTION_API_KEY.slice(-5) : 'N√£o definida'}`);\n    \n    try {\n        // Verificar status da inst√¢ncia\n        console.log('\\nVerificando status da inst√¢ncia...');\n        const status = await checkInstanceStatus();\n        console.log('Status da inst√¢ncia:', status);\n        \n        // Enviar mensagem de teste\n        if (process.env.ADMIN_WHATSAPP_NUMBER_1) {\n            console.log('\\nEnviando mensagem de teste para o administrador...');\n            const result = await sendWhatsAppMessage(\n                process.env.ADMIN_WHATSAPP_NUMBER_1, \n                'Mensagem de teste do sistema - ' + new Date().toLocaleString()\n            );\n            console.log('Resultado do envio:', result ? 'Sucesso' : 'Falha');\n        } else {\n            console.log('\\nN√∫mero do administrador n√£o configurado. Pulando teste de envio.');\n        }\n    } catch (error) {\n        console.error('Erro durante o teste:', error);\n    }\n}\n\ntestEvolutionApi();",
    "test-proposta.js": "const { getLead, addLead, updateLead } = require('./database');\n\n// Fun√ß√£o de c√°lculo de proposta (copiada do index.js)\nfunction calculateProposal(faturaData) {\n    const { valorTotal, valorCip, tipoConexao, tarifaEnergiaKwh } = faturaData;\n    const custoDisponibilidadeKwh = { 'MONOFASICO': 30, 'BIFASICO': 50, 'TRIFASICO': 100 };\n    const taxaMinimaKwh = custoDisponibilidadeKwh[tipoConexao?.toUpperCase()] || 50;\n    const taxaMinimaValor = taxaMinimaKwh * (parseFloat(tarifaEnergiaKwh) || 0.8);\n    const baseDeCalculo = parseFloat(valorTotal || 0) - parseFloat(valorCip || 0) - taxaMinimaValor;\n    if (baseDeCalculo <= 0) return null;\n    const economiaMensal = baseDeCalculo * 0.20;\n    return {\n        economiaMensal: economiaMensal.toFixed(2).replace('.', ','),\n        economiaAnual: (economiaMensal * 12).toFixed(2).replace('.', ','),\n        economia5Anos: (economiaMensal * 60).toFixed(2).replace('.', ','),\n    };\n}\n\n// Fun√ß√£o para simular gera√ß√£o de proposta\nasync function testarGeracaoProposta() {\n    console.log('üß™ === TESTE DE GERA√á√ÉO DE PROPOSTA ===\\n');\n    \n    // Dados de exemplo para teste\n    const dadosTeste = {\n        valorTotal: 350.50,\n        valorCip: 15.20,\n        tipoConexao: 'BIFASICO',\n        tarifaEnergiaKwh: 0.85\n    };\n    \n    console.log('üìä Dados da Fatura de Teste:');\n    console.log(`   ‚Ä¢ Valor Total: R$ ${dadosTeste.valorTotal}`);\n    console.log(`   ‚Ä¢ Valor CIP: R$ ${dadosTeste.valorCip}`);\n    console.log(`   ‚Ä¢ Tipo Conex√£o: ${dadosTeste.tipoConexao}`);\n    console.log(`   ‚Ä¢ Tarifa kWh: R$ ${dadosTeste.tarifaEnergiaKwh}\\n`);\n    \n    // Calcular proposta\n    const proposta = calculateProposal(dadosTeste);\n    \n    if (proposta) {\n        console.log('‚úÖ PROPOSTA GERADA COM SUCESSO!');\n        console.log('üí∞ Resultados:');\n        console.log(`   ‚Ä¢ Economia Mensal: R$ ${proposta.economiaMensal}`);\n        console.log(`   ‚Ä¢ Economia Anual: R$ ${proposta.economiaAnual}`);\n        console.log(`   ‚Ä¢ Economia 5 Anos: R$ ${proposta.economia5Anos}\\n`);\n    } else {\n        console.log('‚ùå ERRO: N√£o foi poss√≠vel gerar a proposta (base de c√°lculo <= 0)\\n');\n    }\n    \n    // Teste com diferentes cen√°rios\n    console.log('üîÑ Testando diferentes cen√°rios:\\n');\n    \n    const cenarios = [\n        { nome: 'Conta Baixa', valorTotal: 120, valorCip: 10, tipoConexao: 'MONOFASICO', tarifaEnergiaKwh: 0.75 },\n        { nome: 'Conta M√©dia', valorTotal: 280, valorCip: 15, tipoConexao: 'BIFASICO', tarifaEnergiaKwh: 0.80 },\n        { nome: 'Conta Alta', valorTotal: 650, valorCip: 25, tipoConexao: 'TRIFASICO', tarifaEnergiaKwh: 0.90 },\n        { nome: 'Conta Muito Baixa', valorTotal: 80, valorCip: 5, tipoConexao: 'MONOFASICO', tarifaEnergiaKwh: 0.70 }\n    ];\n    \n    cenarios.forEach((cenario, index) => {\n        console.log(`${index + 1}. ${cenario.nome}:`);\n        const resultado = calculateProposal(cenario);\n        if (resultado) {\n            console.log(`   ‚úÖ Economia Mensal: R$ ${resultado.economiaMensal}`);\n        } else {\n            console.log(`   ‚ùå Proposta invi√°vel (valor muito baixo)`);\n        }\n        console.log('');\n    });\n}\n\n// Fun√ß√£o para testar com dados de um lead real\nasync function testarComLeadReal(whatsappNumber) {\n    console.log(`üîç Buscando dados do lead: ${whatsappNumber}\\n`);\n    \n    try {\n        const lead = await getLead(whatsappNumber);\n        \n        if (!lead) {\n            console.log('‚ùå Lead n√£o encontrado no banco de dados\\n');\n            return;\n        }\n        \n        console.log('üë§ Dados do Lead:');\n        console.log(`   ‚Ä¢ Nome: ${lead.name || 'N/A'}`);\n        console.log(`   ‚Ä¢ CPF: ${lead.cpf || 'N/A'}`);\n        console.log(`   ‚Ä¢ Est√°gio: ${lead.stage}`);\n        console.log(`   ‚Ä¢ Consumo M√©dio: ${lead.consumo_medio || 'N/A'} kWh`);\n        console.log(`   ‚Ä¢ Taxa Ilumina√ß√£o: R$ ${lead.taxa_iluminacao || 'N/A'}`);\n        console.log(`   ‚Ä¢ Tipo Conex√£o: ${lead.tipo_conexao || 'N/A'}\\n`);\n        \n        if (lead.consumo_medio && lead.taxa_iluminacao) {\n            // Simular dados de fatura baseados nos dados do lead\n            const dadosSimulados = {\n                valorTotal: lead.consumo_medio * 0.8 + parseFloat(lead.taxa_iluminacao || 0),\n                valorCip: 15,\n                tipoConexao: lead.tipo_conexao || 'BIFASICO',\n                tarifaEnergiaKwh: 0.8\n            };\n            \n            console.log('üìä Simulando proposta com dados do lead...');\n            const proposta = calculateProposal(dadosSimulados);\n            \n            if (proposta) {\n                console.log('‚úÖ PROPOSTA SIMULADA:');\n                console.log(`   ‚Ä¢ Economia Mensal: R$ ${proposta.economiaMensal}`);\n                console.log(`   ‚Ä¢ Economia Anual: R$ ${proposta.economiaAnual}`);\n                console.log(`   ‚Ä¢ Economia 5 Anos: R$ ${proposta.economia5Anos}\\n`);\n            } else {\n                console.log('‚ùå N√£o foi poss√≠vel gerar proposta com os dados dispon√≠veis\\n');\n            }\n        } else {\n            console.log('‚ö†Ô∏è  Dados insuficientes para gerar proposta (faltam consumo_medio ou taxa_iluminacao)\\n');\n        }\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao buscar lead:', error.message);\n    }\n}\n\n// Fun√ß√£o principal\nasync function main() {\n    const args = process.argv.slice(2);\n    \n    if (args.length === 0) {\n        // Teste padr√£o\n        await testarGeracaoProposta();\n    } else if (args[0] === '--lead' && args[1]) {\n        // Teste com lead espec√≠fico\n        await testarComLeadReal(args[1]);\n    } else {\n        console.log('\\nüìñ Como usar:');\n        console.log('   node test-proposta.js                    # Teste padr√£o');\n        console.log('   node test-proposta.js --lead 5511999999999  # Teste com lead espec√≠fico\\n');\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = { calculateProposal, testarGeracaoProposta, testarComLeadReal };",
    "package.json": "{\n    \"name\": \"bot-energia-solar\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Bot de automa√ß√£o para energia solar com Gemini e Evolution API\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"start\": \"node index.js\",\n        \"campaign\": \"node campaign.js\",\n        \"report\": \"node report.js\"\n    },\n    \"author\": \"LUZ\",\n    \"license\": \"ISC\",\n    \"engines\": {\n        \"node\": \">=18\"\n    },\n    \"dependencies\": {\n        \"@google/generative-ai\": \"^0.14.1\",\n        \"axios\": \"^1.7.2\",\n        \"dotenv\": \"^16.4.5\",\n        \"express\": \"^4.19.2\",\n        \"google-auth-library\": \"^9.11.0\",\n        \"google-spreadsheet\": \"^4.1.2\",\n        \"node-schedule\": \"^2.1.1\",\n        \"pdf-lib\": \"^1.17.1\",\n        \"sqlite3\": \"^5.1.7\"\n    }\n}\n",
    ".env": "# ===== CONFIGURA√á√ïES DA EVOLUTION API =====\n# URL base da sua inst√¢ncia Evolution API\nEVOLUTION_API_URL=https://evolutionapi.energiaa.com.br/\n\n# Chave de API global da Evolution API\nEVOLUTION_API_KEY=01310A1D8480-4414-A4E5-D2BF26FC6AB8\n\n# Nome da inst√¢ncia do WhatsApp na Evolution API\nEVOLUTION_INSTANCE_NAME=Gabriel\n\n# ===== CONFIGURA√á√ïES DO GOOGLE SHEETS =====\n# ID da planilha Google Sheets (extra√≠do da URL)\nGOOGLE_SHEET_ID=1cj-TYYkMa4IzeeXcVXs0yA7qN1rNlHOVSHT8Gat2CYg\n\n# Email da conta de servi√ßo do Google\nGOOGLE_SERVICE_ACCOUNT_EMAIL=bot-sheets-access@energia-a.iam.gserviceaccount.com\n\n# Chave privada da conta de servi√ßo (com \\n para quebras de linha)\nGOOGLE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/B7yTc0fbJHft\\n3BcJlJFqMx95NWBwRx8aLkdSQT9T9qrLt+9dpoeoLoNT6zJMBYzMKaIbAI3HXAgt\\nvqlJOViXqmJl1+TnJmZd4pNSGXFarF+HXG8Lex6QX5cZgJp6+Pv3trC1c15FE+Tc\\nYHRTAiUXyKKTxwGQ2CbXqW0Ueycu+8s0WqoayFTGeqCyyOu+gKT328si7ciWkbdQ\\n+QYe7V9Zst355ccBjCU0at6ifJQPFlGIiIkyI8DIMXjy5lA8MbFK9TKnAtRNLr9o\\neIaKTfH4rNxNGiJcDzOkJn7bTRl+Gnuh5KGLVGt1spHwR1Yy0i1vGQphSBojtbw9\\n8qAkq3JpAgMBAAECggEAB1EqoyUK0I9n29zOvXSQ6VYAgiofgc12JIUIuzvuM682\\n+2JzDhOIDoFdOdvAVEQ2J8cV7AasOQd3JAFr2DEsCdD5kSmhBh5NmmOOWquxLb18\\nsLLmUfqIHivA+0Fcb0Db3Gs/og9DfE4OIl7TcAC0NhxeoXWHTzBctIRij3/RMzmI\\nreATS6hDGi6ZT8Rw4sJOL2kzHs/NzKvptSiN5NE2ORYFnciMhT+bP9zJ+H+wBzJ9\\nesXWh0g8mI9cs23W7X7Yj7hXi/SevAbxYKEo/L3bDr+yPhAoZHqUecU5WyGA6hi1\\nGia4BwA8Av7cTTvC4Wv+GbmNlL+C+pzd2oyWRXBUXQKBgQDe+VE8WDnIy8vdV4A8\\nAa6ieHrEfoitjUgo/qg4D36X6nVJwieeOftMmhJO99HzNtKXIEncV/zaqjppodMD\\neB974Zyh8bX19IdZ0w/0lfZpeGwxmBu/Rf06WjBpsPb9aTF2mk0ZQ8ZM9v6b+Pmo\\ndQwynsDnB/1V/eE14K3vzVXmGwKBgQDbUy9bhfz4Z5K7n9JjCWqWlZS0NAwnKR29\\nWJV9B+5VpifNz3ueQSRX3UmywX+te87FOjpx2TryKYogeIYj8Hl2k0K98FlJRID7\\nn2dGMVCSl1Dt1cNP6eyuY8/FdElw3l7VcABn+um3G/FcMA3WFEtArlrlv9j+GOwS\\nbNqxfPWhywKBgQDHBn/uf0nE47Qq9CmwZkf9GdFrhw5064EXpod80sfKziq3FajL\\nYTHgpD3nYulyUOMUpmuHVLqMbBoLo7h4hkaEC1QGcXxb+FLAaNb7GMiESEs60W0j\\nBFQOO+au0JkGhVjzZrOe85ITrPyDOG+QYDntDStejREiKqVVtCFNxVkBNQKBgHqG\\najpzC/OpyOtQSbRSGl2tirlxKijma1rQFhMXTypB/JKZirHKKod7dCSMvMsqE0VT\\nVjsr5CZM1oF1U1rYiMKZWfvKPdcUkgn/7y3jduOt7OQxOz91q2dxEy133V9Umx4Z\\nx+BO6CoHTjr2DYS/KZskzFr1Zj/tpFRWw4XMDV0pAoGACoX+YGVrS2hKKVFZcouT\\nc7XUTCsaBZdfOa/2ICofk5Fbdk8UDgkYNuo1kD3O6ThjK+wqVLFLpj+ycLEgaVzb\\n2OVigNkxuzfWcRrm4g0gbZQzauKjXhJIYBH1LpUgBvZ+ck/EzYOO5gTeT46dQ32Q\\nA0sxjbQ2Et7n0t/Rf6D/5zc=\\n-----END PRIVATE KEY-----\\n\"\n\n# ===== CONFIGURA√á√ïES DO GEMINI AI =====\n# Chave de API do Google Gemini\nGEMINI_API_KEY=AIzaSyC_7wuRL8ciM2sagJ9pbxRJI8ZBdzlC1cs\n\n# ===== CONFIGURA√á√ïES DOS ADMINISTRADORES =====\n# N√∫mero do WhatsApp do administrador principal (com c√≥digo do pa√≠s, sem +)\nADMIN_WHATSAPP_NUMBER_1=554388525260\n\n# N√∫mero do WhatsApp do administrador secund√°rio (opcional)\nADMIN_WHATSAPP_NUMBER_2=5511888888888\n\n# ===== CONFIGURA√á√ïES DO SERVIDOR =====\n# Porta do servidor (padr√£o: 8080 para Cloud Run)\nPORT=3001"
  }
}